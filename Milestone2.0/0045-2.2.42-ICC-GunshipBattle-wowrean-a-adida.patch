From a3dae1e5c7f2f17f98244577d49ea3ce9c8d4bd4 Mon Sep 17 00:00:00 2001
From: Eilo <eilo2518@gmail.com>
Date: Mon, 6 Feb 2012 18:38:59 -0500
Subject: [PATCH 45/65] =?UTF-8?q?2.2.42=20ICC:=20GunshipBattle=20wowrean=20a?=
 =?UTF-8?q?=C3=B1adida?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 sql/2012_01_08_16_world_gunship.sql                |  331 ++
 src/server/game/Scripting/ScriptLoader.cpp         |    2 +
 src/server/game/Spells/SpellMgr.cpp                |    5 +
 src/server/scripts/Northrend/CMakeLists.txt        |    1 +
 .../boss_gunship_battle_wowrean.cpp                | 3359 ++++++++++++++++++++
 .../Northrend/IcecrownCitadel/icecrown_citadel.h   |   67 +
 .../IcecrownCitadel/instance_icecrown_citadel.cpp  |  285 ++-
 7 files changed, 4048 insertions(+), 2 deletions(-)
 create mode 100644 sql/2012_01_08_16_world_gunship.sql
 create mode 100644 src/server/scripts/Northrend/IcecrownCitadel/boss_gunship_battle_wowrean.cpp

diff --git a/sql/2012_01_08_16_world_gunship.sql b/sql/2012_01_08_16_world_gunship.sql
new file mode 100644
index 0000000..54744ec
--- /dev/null
+++ b/sql/2012_01_08_16_world_gunship.sql
@@ -0,0 +1,331 @@
+-- Eilo (https://github.com/eilo)
+-- Querys recopiladas de script original por Vlad y Castiel
+-- Añadidos por Eilo, Hispano, Muzashi y Strolx
+
+-- Videos adicionales http://www.youtube.com/watch?v=h36xHUdXm84
+-- Gunship Battle
+
+-- Muradin y Saurfang
+DELETE FROM `creature_template` WHERE (`entry`=50004);
+INSERT INTO `creature_template` (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`) VALUES
+(50004, 0, 0, 0, 0, 0, 11686, 0, 0, 0, 'High Overlord Saurfang', '', '', 0, 80, 80, 3, 1802, 1802, 0, 0, 0, 1, 1, 252, 357, 0, 304, '7.5', 2000, 0, 1, 33554432, 8, 0, 0, 0, 0, 0, 215, 320, 44, 7, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 1000, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, '', 12340);
+DELETE FROM `creature_template` WHERE (`entry`=50006);
+INSERT INTO `creature_template` (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`) VALUES
+(50006, 0, 0, 0, 0, 0, 11686, 0, 0, 0, 'Muradin Bronzebeard', '', '', 10875, 83, 83, 2, 1802, 1802, 1, 1, '1.14286', 1, 1, 468, 702, 0, 175, '47.2', 2000, 2000, 1, 33554432, 8, 0, 0, 0, 0, 0, 374, 562, 140, 7, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15284, 70309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 175, 1, 1, 0, 0, 0, 0, 0, 0, 0, 164, 1, 0, 0, 0, '', 12340);
+UPDATE `creature_template` SET `flags_extra` = 2 WHERE `entry` IN (50004, 50006);
+
+-- Varios
+UPDATE `creature_template` SET `npcflag` = 1 WHERE `entry` IN (36939, 38156, 38637, 38638);
+
+-- Templates del trash
+UPDATE `creature_template` SET `faction_A` = 1801, `faction_H` = 1801, `baseattacktime` = 2000, `rangeattacktime` = 2000, `unit_flags` = 32832, `spell1` = 71339, `spell2` = 70161, `spell3` = 72539, `mechanic_immune_mask` = 73745 WHERE `entry` IN (36968, 38403, 38675, 38676);
+UPDATE `creature_template` SET `faction_A` = 1802, `faction_H` = 1802, `baseattacktime` = 2000, `rangeattacktime` = 2000, `unit_flags` = 32832, `spell1` = 71335, `spell2` = 70162, `spell3` = 72566, `mechanic_immune_mask` = 73745 WHERE `entry` IN (36969, 38408, 38689, 38690);
+
+-- Spawn para el sorcerer y el vindicator
+DELETE FROM `creature` WHERE `id`=37003;
+INSERT INTO `creature` (`guid`,`id`,`map`,`spawnMask`,`phaseMask`,`modelid`,`equipment_id`,`position_x`,`position_y`,`position_z`,`orientation`,`spawntimesecs`,`spawndist`,`currentwaypoint`,`curhealth`,`curmana`,`MovementType`,`npcflag`,`unit_flags`,`dynamicflags`) VALUES
+(200988, 37003, 631, 15, 1, 0, 0, -562.385, 2217.58, 199.969, 3.46228, 86400, 0, 0, 398434, 41690, 0, 0, 0, 0);
+DELETE FROM `creature` WHERE `id`=37026;
+INSERT INTO `creature` (`guid`,`id`,`map`,`spawnMask`,`phaseMask`,`modelid`,`equipment_id`,`position_x`,`position_y`,`position_z`,`orientation`,`spawntimesecs`,`spawndist`,`currentwaypoint`,`curhealth`,`curmana`,`MovementType`,`npcflag`,`unit_flags`,`dynamicflags`) VALUES
+(201020, 37026, 631, 15, 1, 0, 0, -571.091, 2219.71, 199.969, 5.06842, 86400, 0, 0, 269600, 91600, 0, 0, 0, 0);
+
+-- Scriptnames +1
+UPDATE `creature_template` SET `ScriptName` = 'npc_muradin_gunship' WHERE `entry` = 36948;
+UPDATE `creature_template` SET `ScriptName` = 'npc_saurfang_gunship' WHERE `entry` = 36939;
+UPDATE `creature_template` SET `ScriptName` = 'npc_zafod_boombox' WHERE `entry` = 37184;
+UPDATE `creature_template` SET `ScriptName` = 'npc_korkron_defender' WHERE `entry` = 37032;
+UPDATE `creature_template` SET `ScriptName` = 'npc_korkron_primalist' WHERE `entry` = 37030;
+UPDATE `creature_template` SET `ScriptName` = 'npc_skybreaker_vindicator' WHERE `entry` = 37003;
+UPDATE `creature_template` SET `ScriptName` = 'npc_skybreaker_protector' WHERE `entry` = 36998;
+UPDATE `creature_template` SET `ScriptName` = 'npc_icc_spire_frostwyrm' WHERE `entry` = 37230;
+UPDATE `creature_template` SET `ScriptName` = 'npc_korkron_axethrower_rifleman' WHERE `entry` = 36968;
+UPDATE `creature_template` SET `ScriptName` = 'npc_korkron_axethrower_rifleman' WHERE `entry` = 36969;
+UPDATE `creature_template` SET `ScriptName` = 'npc_mortar_soldier_or_rocketeer', AIName = '' WHERE `entry` = 36982;
+UPDATE `creature_template` SET `ScriptName` = 'npc_mortar_soldier_or_rocketeer', AIName = '' WHERE `entry` = 36978;
+UPDATE `creature_template` SET `ScriptName` = 'npc_gunship_mage' WHERE `entry` = 37117;
+UPDATE `creature_template` SET `ScriptName` = 'npc_gunship_mage' WHERE `entry` = 37116;
+UPDATE `creature_template` SET `ScriptName` = 'npc_gunship_trigger' WHERE `entry` = 37547;
+UPDATE `creature_template` SET `ScriptName` = 'npc_gunship_portal' WHERE `entry` = 37227;
+UPDATE `creature_template` SET `ScriptName` = 'npc_marine_or_reaver' WHERE `entry` = 36957;
+UPDATE `creature_template` SET `ScriptName` = 'npc_marine_or_reaver' WHERE `entry` = 36950;
+UPDATE `creature_template` SET `ScriptName` = 'npc_sergeant' WHERE `entry` = 36960;
+UPDATE `creature_template` SET `ScriptName` = 'npc_sergeant' WHERE `entry` = 36961;
+UPDATE `creature_template` SET `ScriptName` = 'npc_gunship_skybreaker' WHERE `entry` = 37540;
+UPDATE `creature_template` SET `ScriptName` = 'npc_gunship_orgrimmar' WHERE `entry` = 37215;
+UPDATE `creature_template` SET `ScriptName` = 'npc_gunship_cannon' WHERE `entry` = 36838;
+UPDATE `creature_template` SET `ScriptName` = 'npc_gunship_cannon' WHERE `entry` = 36839;
+
+UPDATE `gameobject_template` SET `ScriptName` = 'transport_gunship' WHERE `entry` IN (201580, 201812);
+
+-- Areatriggers <--- OJO AQUI para los datas de frostwyrms
+DELETE FROM `areatrigger_scripts` WHERE `entry` IN (5630, 5628);
+INSERT INTO `areatrigger_scripts` (`entry`,`ScriptName`) VALUES
+(5628,'at_icc_land_frostwyrm'),
+(5630,'at_icc_land_frostwyrm');
+
+-- SpellScripts para la batalla <---- aqui hay que apañar las scripts para añadir explosiones
+DELETE FROM `spell_script_names` WHERE `spell_id` IN (70713, 68645, 69471, 69488, 69402, 70175, 71335, 71339);
+INSERT INTO `spell_script_names` (`spell_id`, `ScriptName`) VALUES
+('70713', 'spell_icc_remove_rocket_pack'),
+('68645', 'spell_rocket_pack'),
+('69471', 'spell_gb_heat_drain'),
+('69488', 'spell_gb_overheat_drain'),
+('69402', 'spell_gb_incinerating_blast'),
+('70175', 'spell_gb_incinerating_blast'),
+('71335', 'spell_gb_burning_pitch'),
+('71339', 'spell_gb_burning_pitch');
+
+-- Añadiendo informacion complementaria de cañones (Por 2010phenix - https://github.com/2010phenix)
+DELETE FROM `conditions` WHERE `SourceTypeOrReferenceId`=13 AND `SourceEntry` IN (69400, 70173, 69402, 70175, 70374, 70383, 72959);
+SET @ENTRYA := 37540;
+SET @ENTRYH := 37215;
+SET @ENTRYA10H := 38128;
+SET @ENTRYH10H := 38129;
+SET @ENTRYA25 := 38699;
+SET @ENTRYH25 := 38701;
+SET @ENTRYA25H := 38700;
+SET @ENTRYH25H := 38702;
+INSERT INTO `conditions` (`SourceTypeOrReferenceId`, `SourceEntry`, `ConditionTypeOrReference`, `ConditionValue1`, `ConditionValue2`) VALUES
+('13', '69400', '18', '1', @ENTRYA), -- Horde Cannon (Cannon Blast) set to hit only Skybreaker (effect 2)
+('13', '70173', '18', '1', @ENTRYH), -- Alliance Cannon (Cannon Blast) set to hit only Orgrimms Hammer (effect 2)
+('13', '69402', '18', '1', @ENTRYA), -- Horde Cannon (Incinerating Blast) set to hit only Skybreaker (effect 2)
+('13', '70175', '18', '1', @ENTRYH), -- Alliance Cannon (Incinerating Blast) set to hit only Orgrimms Hammer (effect 2)
+('13', '70374', '18', '1', @ENTRYA), -- Burning Pitch
+('13', '70383', '18', '1', @ENTRYH), -- Burning Pitch
+('13', '69400', '18', '1', @ENTRYA10H), -- Horde Cannon (Cannon Blast) set to hit only Skybreaker - 10H (effect 2)
+('13', '70173', '18', '1', @ENTRYH10H), -- Alliance Cannon (Cannon Blast) set to hit only Orgrimms Hammer 10H (effect 2)
+('13', '69402', '18', '1', @ENTRYA10H), -- Horde Cannon (Incinerating Blast) set to hit only Skybreaker 10H(effect 2)
+('13', '70175', '18', '1', @ENTRYH10H), -- Alliance Cannon (Incinerating Blast) set to hit only Orgrimms Hammer 10H (effect 2)
+('13', '70374', '18', '1', @ENTRYA10H), -- Burning Pitch
+('13', '70383', '18', '1', @ENTRYH10H), -- Burning Pitch
+('13', '69400', '18', '1', @ENTRYA25), -- Horde Cannon (Cannon Blast) set to hit only Skybreaker - 25Normal (effect 2)
+('13', '70173', '18', '1', @ENTRYH25), -- Alliance Cannon (Cannon Blast) set to hit only Orgrimms Hammer - 25Normal (effect 2)
+('13', '69402', '18', '1', @ENTRYA25), -- Horde Cannon (Incinerating Blast) set to hit only Skybreaker - 25Normal (effect 2)
+('13', '70175', '18', '1', @ENTRYH25), -- Alliance Cannon (Incinerating Blast) set to hit only Orgrimms Hammer - 25Normal (effect 2)
+('13', '70374', '18', '1', @ENTRYA25),  -- Burning Pitch
+('13', '70383', '18', '1', @ENTRYH25),  -- Burning Pitch
+('13', '69400', '18', '1', @ENTRYA25H), -- Horde Cannon (Cannon Blast) set to hit only Skybreaker -- 25H (effect 2)
+('13', '70173', '18', '1', @ENTRYH25H), -- Alliance Cannon (Cannon Blast) set to hit only Orgrimms Hammer -- 25H (effect 2)
+('13', '69402', '18', '1', @ENTRYA25H), -- Horde Cannon (Incinerating Blast) set to hit only Skybreaker -- 25H (effect 2)
+('13', '70175', '18', '1', @ENTRYH25H), -- Alliance Cannon (Incinerating Blast) set to hit only Orgrimms Hammer -- 25H (effect 2)
+('13', '70374', '18', '1', @ENTRYA25H), -- Burning Pitch
+('13', '70383', '18', '1', @ENTRYH25H), -- Burning Pitch
+('13', '72959', '18', '1', 0); -- Achievement (Radius: 50000 yards)
+
+
+-- Hacky, hay que darle nuevos parametros a los transportes de aqui
+DELETE FROM transports WHERE entry IN (201580, 201581, 201811, 201812);
+DELETE FROM creature WHERE id IN (37230, 36838, 36839, 36948, 36939);
+DELETE FROM `creature_template_addon` WHERE (`entry`=37547);
+UPDATE `creature_template` SET `flags_extra` = 130 WHERE `entry` = 37547;
+
+-- Para los cañones
+UPDATE `creature_template` SET `exp` = 2, `VehicleId` = 554, `RegenHealth` = 0, `npcflag` = 16777216, `spell1` = 69399, `spell2` = 69401 WHERE entry = 36839;
+UPDATE `creature_template` SET `exp` = 2, `VehicleId` = 554, `RegenHealth` = 0, `npcflag` = 16777216, `spell1` = 70172, `spell2` = 70174 WHERE entry = 36838;
+REPLACE INTO `npc_spellclick_spells` (`npc_entry`, `spell_id`, `quest_start`, `cast_flags`) VALUES
+('36838', '46598', '0', '1'),
+('36839', '46598', '0', '1');
+DELETE FROM `creature_template_addon` WHERE `entry` IN (36838, 36839);
+INSERT INTO `creature_template_addon` (`entry`, `path_id`, `mount`, `bytes1`, `bytes2`, `emote`, `auras`) VALUES
+(36838, 0, 0, 0, 1, 0, 69470),
+(36839, 0, 0, 0, 1, 0, 69470);
+UPDATE `creature_template` SET `difficulty_entry_1` = '38129',`difficulty_entry_2` = '38701', `difficulty_entry_3` = '38702' WHERE `entry` =37215;
+UPDATE `creature_template` SET `faction_A` = 35, `faction_H` = 35, `minlevel` = 83, `maxlevel` = 83, `unit_flags` = 4, `flags_extra` = 2, `modelid1` = 1126, `modelid2` = 11686 WHERE `entry` IN (37215, 38129, 38701, 38702, 37540, 38128, 38699, 38700);
+-- Arreglando los cañones en 25man
+UPDATE `creature_template` SET `difficulty_entry_1`=0 WHERE `entry`=36839 LIMIT 1;
+-- Evitando que se muevan duh
+UPDATE `creature_template` SET `speed_walk`=0 ,`speed_run`=0 WHERE `entry` IN (36839,36838);
+
+-- Mas condiciones
+-- Add spell conditions for 69705 (Below Zero)
+SET @SPELL := 69705;
+DELETE FROM `conditions` WHERE `SourceTypeOrReferenceId`=13 AND `SourceEntry`=@SPELL;
+INSERT INTO `conditions` (`SourceTypeOrReferenceId`,`SourceGroup`,`SourceEntry`,`ElseGroup`,`ConditionTypeOrReference`,`ConditionValue1`,`ConditionValue2`,`ConditionValue3`,`ErrorTextId`,`ScriptName`,`Comment`) VALUES
+(13,0,@SPELL,0,18,1,36838,0,0,'','Gunship Battle - Spell 69705 (Below Zero) target creature 36838'),
+(13,0,@SPELL,0,18,1,36839,0,0,'','Gunship Battle - Spell 69705 (Below Zero) target creature 36839');
+
+-- AQUI HAY QUE AÑADIR LOS EFECTOS DE EXPLOSION ***** OJO ******
+DELETE FROM `spell_linked_spell` WHERE `spell_trigger` = 71193 AND `spell_effect` = -71188;
+DELETE FROM `spell_linked_spell` WHERE `spell_trigger` = 71195 AND `spell_effect` = -71193;
+DELETE FROM `spell_linked_spell` WHERE `spell_trigger` = 68645 AND `spell_effect` = 69193;
+DELETE FROM `spell_linked_spell` WHERE `spell_trigger` = 73077 AND `spell_effect` = 69188;
+DELETE FROM `spell_linked_spell` WHERE `spell_trigger` = 73077 AND `spell_effect` = 68721;
+DELETE FROM `spell_linked_spell` WHERE `spell_trigger` = 69193 AND `spell_effect` = 69192;
+INSERT INTO `spell_linked_spell` (`spell_trigger`, `spell_effect`, `type`, `comment`) VALUES
+(71193, -71188, 0, 'Gunship Battle - Veteran removes Experimented'),
+(71195, -71193, 0, 'Gunship Battle - Elite removes Veteran'),
+(73077, 69188, 2, 'Gunship Battle - Fix visual for Rocket Pack'),
+(68645, 69193, 0, 'Gunship Battle - Fix visual for Rocket Pack'),
+(69193, 69192, 0, 'Gunship Battle - Cast Rocket Burst when landing with Rocket Pack');
+
+-- Spells <---------- Aqui hay que fijarse bien que el trash este ejecutando las cosas como debe
+UPDATE `creature_template` SET `unit_flags` = 33554564, `flags_extra` = 2 WHERE `entry` IN (37044, 37041);
+UPDATE `creature_template` SET `faction_A` = 1801, `faction_H` = 1801 WHERE `entry` = 37044;
+UPDATE `creature_template` SET `faction_A` = 1802, `faction_H` = 1802 WHERE `entry` = 37041;
+DELETE FROM `creature_template_addon` WHERE `entry` IN (37044, 37041);
+SET @KORKRON := 37044; -- Kor'kron Battle Standard
+SET @SKYBREAKER := 37041; -- Skybreaker Battle Standard
+SET @HSPELL := 69809;
+SET @ASPELL := 69808;
+UPDATE `creature_template` SET `AIName`='SmartAI' WHERE `entry` IN (@KORKRON, @SKYBREAKER);
+DELETE FROM `smart_scripts` WHERE `source_type`=0 AND `entryorguid` IN (@KORKRON, @SKYBREAKER);
+INSERT INTO `smart_scripts` (`entryorguid`,`source_type`,`id`,`link`,`event_type`,`event_phase_mask`,`event_chance`,`event_flags`,`event_param1`,`event_param2`,`event_param3`,`event_param4`,`action_type`,`action_param1`,`action_param2`,`action_param3`,`action_param4`,`action_param5`,`action_param6`,`target_type`,`target_param1`,`target_param2`,`target_param3`,`target_x`,`target_y`,`target_z`,`target_o`,`comment`) VALUES
+(@KORKRON ,0,0,0,25,0,100,1,0,0,0,0,11,@HSPELL,2,0,0,0,0,1,0,0,0,0,0,0,0, 'Kor''kron Battle Standard - On spawn & reset - Cast spell 69809'),
+(@SKYBREAKER,0,0,0,25,0,100,1,0,0,0,0,11,@ASPELL,2,0,0,0,0,1,0,0,0,0,0,0,0, 'Skybreaker Battle Standard - On spawn & reset - Cast spell 69808');
+
+-- Mas textos
+REPLACE INTO `creature_text` (`entry`, `groupid`, `id`, `text`, `type`, `language`, `probability`, `emote`, `duration`, `sound`, `comment`) VALUES
+(50004, 1, 0, 'Reavers, Sergeants, attack!.', 14, 0, 0, 0, 0, 17081, ''),
+(50004, 0, 0, 'This is not your battle, dwarf. Back down or we will be forced to destroy your ship.', 14, 0, 0, 0, 0, 17093, ''),
+(50006, 1, 0, 'Marines! Sergeants! Attack!', 14, 0, 0, 0, 0, 16956, ''),
+(50006, 0, 0, 'Move yer jalopy or well blow it out of the sky, orc! The Hordes got no business here!', 14, 0, 0, 0, 0, 16969, '');
+
+-- Textos
+SET @MURADIN := 36948;
+SET @OVERLORD := 36939;
+SET @PRIMALIST := 37030;
+SET @INVOKER := 37033;
+SET @DEFENDER := 37032;
+SET @VINDICATOR := 37003;
+SET @SORCERER := 37026;
+SET @PROTECTOR := 36998;
+SET @FROSTWYRM := 37230;
+SET @SOUNDID :=0;
+DELETE FROM `creature_text` WHERE `entry` IN (36948, 36939, 37030, 37033, 37032, 37003, 37026, 36998, 37230);
+INSERT INTO `creature_text` (`entry`,`groupid`,`id`,`text`,`type`,`language`,`probability`,`emote`,`duration`,`sound`,`comment`) VALUES
+(@MURADIN,  0, 0, 'Fire up the engines! We got a meetin'' with destiny, lads!', 14, 0, 100, 0, 0, 16962, 'Muradin Bronzebeard - SAY_INTRO_ALLIANCE_0'),
+(@MURADIN,  1, 0, 'Hold on to yer hats!', 14, 0, 100, 0, 0, 16963, 'Muradin Bronzebeard - SAY_INTRO_ALLIANCE_1'),
+(@MURADIN,  2, 0, 'What in the world is that? Grab me spyglass, crewman!', 14, 0, 100, 0, 0, 16964, 'Muradin Bronzebeard - SAY_INTRO_ALLIANCE_2'),
+(@MURADIN,  3, 0, 'By me own beard! HORDE SAILIN'' IN FAST ''N HOT!', 14, 0, 100, 0, 0, 16965, 'Muradin Bronzebeard - SAY_INTRO_ALLIANCE_3'),
+(@MURADIN,  4, 0, 'EVASIVE ACTION! MAN THE GUNS!', 14, 0, 100, 0, 0, 16966, 'Muradin Bronzebeard - SAY_INTRO_ALLIANCE_4'),
+(@MURADIN,  5, 0, 'Cowardly dogs! Ye blindsided us!', 14, 0, 100, 0, 0, 16967, 'Muradin Bronzebeard - SAY_INTRO_ALLIANCE_5'),
+(@MURADIN,  6, 0, 'Not me battle? I dunnae who ye? think ye are, mister, but I got a score to settle with Arthas and yer not gettin'' in me way! FIRE ALL GUNS! FIRE! FIRE!', 14, 0, 100, 0, 0, 16968, 'Muradin Bronzebeard - SAY_INTRO_ALLIANCE_7'),
+(@MURADIN,  7, 0, 'Move yer jalopy or we''ll blow it out of the sky, orc! The Horde''s got no business here!', 14, 0, 100, 0, 0, 16969, 'Muradin Bronzebeard - SAY_INTRO_HORDE_3'),
+(@MURADIN,  8, 0, 'What''s this then?! Ye won''t be takin'' this son o'' Ironforge''s vessel without a fight!.', 14, 0, 100, 0, 0, 16958, 'Muradin Bronzebeard - SAY_BOARDING_SKYBREAKER_1'),
+(@MURADIN,  9, 0, 'Marines, Sergeants, attack!', 14, 0, 100, 0, 0, 16956, 'Muradin Bronzebeard - SAY_BOARDING_ORGRIMS_HAMMER_0'),
+(@MURADIN, 10, 0, 'Riflemen, shoot faster!', 14, 0, 100, 0, 0, 16954, 'Muradin Bronzebeard - SAY_NEW_RIFLEMEN_SPAWNED'),
+(@MURADIN, 11, 0, 'Mortar team, reload!', 14, 0, 100, 0, 0, 16955, 'Muradin Bronzebeard - SAY_NEW_MORTAR_TEAM_SPAWNED'),
+(@MURADIN, 12, 0, 'We''re taking hull damage, get a sorcerer out here to shut down those cannons!', 14, 0, 100, 0, 0, 16957, 'Muradin Bronzebeard - SAY_NEW_MAGE_SPAWNED'),
+(@MURADIN, 13, 0, 'Don''t say I didn''t warn ya, scoundrels! Onward, brothers and sisters!', 14, 0, 100, 0, 0, 16959, 'Muradin Bronzebeard - SAY_ALLIANCE_VICTORY'),
+(@MURADIN, 14, 0, 'Captain Bartlett, get us out of here! We''re taken too much damage to stay afloat!', 14, 0, 100, 0, 0, 16960, 'Muradin Bronzebeard - SAY_ALLIANCE_DEFEAT'),
+(@OVERLORD, 0, 0, 'Rise up, sons and daughters of the Horde! Today we battle a hated enemy of the Horde! LOK''TAR OGAR!', 14, 0, 100, 0, 0, 17087, 'High Overlord Saurfang - SAY_INTRO_HORDE_0'),
+(@OVERLORD, 1, 0, 'Kor''kron, take us out!', 14, 0, 100, 0, 0, 17088, 'High Overlord Saurfang - SAY_INTRO_HORDE_1_1'),
+(@OVERLORD, 2, 0, 'What is that?! Something approaching in the distance!', 14, 0, 100, 0, 0, 17089, 'High Overlord Saurfang - SAY_INTRO_HORDE_1'),
+(@OVERLORD, 3, 0, 'ALLIANCE GUNSHIP! ALL HANDS ON DECK!', 14, 0, 100, 0, 0, 17090, 'High Overlord Saurfang - SAY_INTRO_HORDE_2'),
+(@OVERLORD, 4, 0, 'You will know our business soon! KOR''KRON, ANNIHILATE THEM!', 14, 0, 100, 0, 0, 17092, 'High Overlord Saurfang - SAY_INTRO_HORDE_4'),
+(@OVERLORD, 5, 0, 'Reavers, Sergeants, attack!', 14, 0, 100, 0, 0, 17081, 'High Overlord Saurfang - SAY_BOARDING_SKYBREAKER_0'),
+(@OVERLORD, 6, 0, 'You DARE board my ship? Your death will come swiftly.', 14, 0, 100, 0, 0, 17083, 'High Overlord Saurfang - SAY_BOARDING_ORGRIMS_HAMMER_1'),
+(@OVERLORD, 7, 0, 'Axethrowers, hurl faster!', 14, 0, 100, 0, 0, 17079, 'High Overlord Saurfang - SAY_NEW_AXETHROWER_SPAWNED'),
+(@OVERLORD, 8, 0, 'Rocketeers, reload!', 14, 0, 100, 0, 0, 17080, 'High Overlord Saurfang - SAY_NEW_ROCKETEERS_SPAWNED'),
+(@OVERLORD, 9, 0, 'We''re taking hull damage, get a battle-mage out here to shut down those cannons!', 14, 0, 100, 0, 0, 17082, 'High Overlord Saurfang - SAY_NEW_BATTLE_MAGE_SPAWNED'),
+(@OVERLORD, 10, 0, 'The Alliance falter. Onward to the Lich King!', 14, 0, 100, 0, 0, 17084, 'High Overlord Saurfang - SAY_HORDE_VICTORY'),
+(@OVERLORD, 11, 0, 'Damage control! Put those fires out! You haven''t seen the last of the Horde!', 14, 0, 100, 0, 0, 17085, 'High Overlord Saurfang - SAY_HORDE_DEFEAT'),
+(@OVERLORD, 12, 0, 'This is not your battle, dwarf. Back down or we will be forced to destroy your ship.', 14, 0, 100, 0, 0, 17093, 'High Overlord Saurfang - SAY_INTRO_ALLIANCE_6'),
+(@PRIMALIST,0, 0, 'Thank the spirits for you, brothers and sisters. The Skybreaker has already left. Quickly now, to Orgrim''s Hammer! If you leave soon, you may be able to catch them.', 12, 0, 100, 0, 0, @SOUNDID, 'Kor''kron Primalist - SAY_FIRST_SQUAD_RESCUED_HORDE_0'),
+(@INVOKER,  0, 0, 'This should be helpin''ya!', 12, 0, 100, 0, 0, @SOUNDID, 'Kor''kron Invoker - SAY_FIRST_SQUAD_RESCUED_HORDE_1'),
+(@INVOKER,  1, 0, '%s summons a Kor''kron Battle Standard.', 16, 0, 100, 0, 0, @SOUNDID, 'Kor''kron Invoker - SAY_SUMMON_BATTLE_STANDARD'),
+(@DEFENDER, 0, 0, 'Aka''Magosh, brave warriors. The alliance is in great number here.', 12, 0, 100, 0, 0, @SOUNDID, 'Kor''kron Defender - SAY_SECOND_SQUAD_RESCUED_HORDE_0'),
+(@DEFENDER, 1, 0, 'Captain Saurfang will be pleased to see you aboard Orgrim''s Hammer. Make haste, we will secure the area until you are ready for take-off.', 12, 0, 100, 0, 0, @SOUNDID, 'Kor''kron Defender - SAY_SECOND_SQUAD_RESCUED_HORDE_1'),
+(@DEFENDER, 2, 0, 'A screeching cry pierces the air above!',41, 0, 100, 0, 0, @SOUNDID, 'Frostwyrm - SAY_FROSTWYRM_SUMMON_0'),
+(@VINDICATOR, 0, 0, 'Thank goodness you arrived when you did, heroes. Orgrim''s Hammer has already left. Quickly now, to The Skybreaker! If you leave soon, you may be able to catch them.', 12, 0, 100, 0, 0, @SOUNDID, 'Skybreaker Vindicator - SAY_FIRST_SQUAD_RESCUED_ALLIANCE_0'),
+(@SORCERER, 0, 0, 'This ought to help!', 12, 0, 100, 0, 0, @SOUNDID, 'Skybreaker Sorcerer - SAY_FIRST_SQUAD_RESCUED_ALLIANCE_1'),
+(@SORCERER, 1, 0, '%s summons a Skybreaker Battle Standard.', 16, 0, 100, 0, 0, @SOUNDID, 'Skybreaker Sorcerer - SAY_SUMMON_BATTLE_STANDARD'),
+(@PROTECTOR,0, 0, 'You have my thanks. We were outnumbered until you arrived.', 12, 0, 100, 0, 0, @SOUNDID, 'Skybreaker Protector - SAY_SECOND_SQUAD_RESCUED_ALLIANCE_0'),
+(@PROTECTOR,1, 0, 'Captain Muradin is waiting aboard The Skybreaker. We''ll secure the area until you are ready for take off.', 12, 0, 100, 0, 0, @SOUNDID, 'Skybreaker Protector - SAY_SECOND_SQUAD_RESCUED_ALLIANCE_1'),
+(@PROTECTOR,2, 0, 'Skybreaker infantry, hold position!', 12, 0, 100, 0, 0, @SOUNDID, 'Skybreaker Protector - SAY_SECOND_SQUAD_RESCUED_ALLIANCE_2'),
+(@PROTECTOR,3, 0, 'A screeching cry pierces the air above!',41, 0, 100, 0, 0, @SOUNDID, 'Frostwyrm - SAY_FROSTWYRM_SUMMON_0'),
+(@FROSTWYRM,0, 0, 'A Spire Frostwyrm lands just before Orgrim''s Hammer.', 16, 0, 100, 0, 0, @SOUNDID, 'Frostwyrm - SAY_FROSTWYRM_LAND_H_1'),
+(@FROSTWYRM,1, 0, 'A Spire Frostwyrm lands just before The Skybreaker. ', 16, 0, 100, 0, 0, @SOUNDID, 'Frostwyrm - SAY_FROSTWYRM_LAND_A_2');
+
+-- Loot de los cofres :)
+DELETE FROM `gameobject_loot_template` WHERE (`entry`=201872);
+INSERT INTO `gameobject_loot_template` VALUES
+(201872, 49426, 100, 1, 0, 2, 2),
+(201872, 50340, 0, 1, 1, 1, 1),
+(201872, 50787, 0, 1, 1, 1, 1),
+(201872, 50788, 0, 1, 1, 1, 1),
+(201872, 50789, 0, 1, 2, 1, 1),
+(201872, 50790, 0, 1, 2, 1, 1),
+(201872, 50791, 0, 1, 1, 1, 1),
+(201872, 50792, 0, 1, 2, 1, 1),
+(201872, 50793, 0, 1, 1, 1, 1),
+(201872, 50794, 0, 1, 1, 1, 1),
+(201872, 50795, 0, 1, 2, 1, 1),
+(201872, 50796, 0, 1, 2, 1, 1),
+(201872, 50797, 0, 1, 2, 1, 1);
+
+DELETE FROM `gameobject_loot_template` WHERE (`entry`=201873);
+INSERT INTO `gameobject_loot_template` VALUES
+(201873, 49426, 100, 1, 0, 2, 2),
+(201873, 49908, 10, 1, 0, 1, 1),
+(201873, 49998, 0, 1, 1, 1, 1),
+(201873, 49999, 0, 1, 2, 1, 1),
+(201873, 50000, 0, 1, 2, 1, 1),
+(201873, 50001, 0, 1, 3, 1, 1),
+(201873, 50002, 0, 1, 2, 1, 1),
+(201873, 50003, 0, 1, 3, 1, 1),
+(201873, 50005, 0, 1, 1, 1, 1),
+(201873, 50006, 0, 1, 3, 1, 1),
+(201873, 50008, 0, 1, 1, 1, 1),
+(201873, 50009, 0, 1, 3, 1, 1),
+(201873, 50010, 0, 1, 2, 1, 1),
+(201873, 50011, 0, 1, 1, 1, 1),
+(201873, 50274, 37.5, 1, 0, 1, 1),
+(201873, 50352, 0, 1, 1, 1, 1),
+(201873, 50359, 0, 1, 2, 1, 1),
+(201873, 50411, 0, 1, 3, 1, 1);
+
+DELETE FROM `gameobject_loot_template` WHERE (`entry`=201874);
+INSERT INTO `gameobject_loot_template` VALUES
+(201874, 49426, 100, 1, 0, 2, 2),
+(201874, 49908, 10, 1, 0, 1, 1),
+(201874, 50345, 0, 1, 2, 1, 1),
+(201874, 51906, 0, 1, 1, 1, 1),
+(201874, 51907, 0, 1, 1, 1, 1),
+(201874, 51908, 0, 1, 1, 1, 1),
+(201874, 51909, 0, 1, 2, 1, 1),
+(201874, 51910, 0, 1, 2, 1, 1),
+(201874, 51911, 0, 1, 2, 1, 1),
+(201874, 51912, 0, 1, 2, 1, 1),
+(201874, 51913, 0, 1, 1, 1, 1),
+(201874, 51914, 0, 1, 2, 1, 1),
+(201874, 51915, 0, 1, 1, 1, 1),
+(201874, 51916, 0, 1, 1, 1, 1);
+
+DELETE FROM `gameobject_loot_template` WHERE (`entry`=201875);
+INSERT INTO `gameobject_loot_template` VALUES
+(201875, 49426, 100, 1, 0, 2, 2),
+(201875, 49908, 10, 1, 0, 1, 1),
+(201875, 50274, 75, 1, 0, 1, 1),
+(201875, 50349, 0, 1, 2, 1, 1),
+(201875, 50366, 0, 1, 1, 1, 1),
+(201875, 50653, 0, 1, 3, 1, 1),
+(201875, 50654, 0, 1, 3, 1, 1),
+(201875, 50655, 0, 1, 3, 1, 1),
+(201875, 50656, 0, 1, 2, 1, 1),
+(201875, 50657, 0, 1, 3, 1, 1),
+(201875, 50658, 0, 1, 1, 1, 1),
+(201875, 50659, 0, 1, 2, 1, 1),
+(201875, 50660, 0, 1, 1, 1, 1),
+(201875, 50661, 0, 1, 1, 1, 1),
+(201875, 50663, 0, 1, 2, 1, 1),
+(201875, 50664, 0, 1, 2, 1, 1),
+(201875, 50665, 0, 1, 1, 1, 1),
+(201875, 50667, 0, 1, 3, 1, 1);
+
+-- Esto es un poco hacky, para los transportes
+UPDATE `gameobject_template` SET `data1` = 201872 WHERE `entry` = 201872;
+UPDATE `gameobject_template` SET `data1` = 201873 WHERE `entry` = 201873;
+UPDATE `gameobject_template` SET `data1` = 201874 WHERE `entry` = 201874;
+UPDATE `gameobject_template` SET `data1` = 201875 WHERE `entry` = 201875;
+UPDATE `gameobject_template` SET `data1` = 201872 WHERE `entry` = 202177;
+UPDATE `gameobject_template` SET `data1` = 201873 WHERE `entry` = 202178;
+UPDATE `gameobject_template` SET `data1` = 201874 WHERE `entry` = 202179;
+UPDATE `gameobject_template` SET `data1` = 201875 WHERE `entry` = 202180;
+
+-- El rocket pack
+UPDATE item_template SET ScriptName = 'item_icc_rocket_pack' WHERE entry = 49278;
+
+-- Zafod Boombox (37184) giver of jetpack
+UPDATE `creature_template` SET `npcflag`=1 WHERE `entry`=37184;
+
diff --git a/src/server/game/Scripting/ScriptLoader.cpp b/src/server/game/Scripting/ScriptLoader.cpp
index 2126bf4..fc10f19 100755
--- a/src/server/game/Scripting/ScriptLoader.cpp
+++ b/src/server/game/Scripting/ScriptLoader.cpp
@@ -471,6 +471,7 @@ void AddSC_boss_falric();
 void AddSC_boss_marwyn();
 void AddSC_boss_lord_marrowgar();       // Icecrown Citadel
 void AddSC_boss_lady_deathwhisper();
+void AddSC_boss_gunship_battle_wowrean();
 void AddSC_boss_deathbringer_saurfang();
 void AddSC_boss_festergut();
 void AddSC_boss_rotface();
@@ -1179,6 +1180,7 @@ void AddNorthrendScripts()
     AddSC_boss_marwyn();
     AddSC_boss_lord_marrowgar();        // Icecrown Citadel
     AddSC_boss_lady_deathwhisper();
+    AddSC_boss_gunship_battle_wowrean();
     AddSC_boss_deathbringer_saurfang();
     AddSC_boss_festergut();
     AddSC_boss_rotface();
diff --git a/src/server/game/Spells/SpellMgr.cpp b/src/server/game/Spells/SpellMgr.cpp
index 820a390..272e5c8 100755
--- a/src/server/game/Spells/SpellMgr.cpp
+++ b/src/server/game/Spells/SpellMgr.cpp
@@ -3098,6 +3098,11 @@ void SpellMgr::LoadDbcDataCorrections()
             case 54171: // Divine Storm
                 spellInfo->MaxAffectedTargets = 3;
                 break;
+            case 68645: // Rocket Pack! Hack untill movejump will be implemented properly
+                spellInfo->Effect[0] = SPELL_EFFECT_KNOCK_BACK_DEST;
+                spellInfo->EffectMiscValue[0] = -250;
+                spellInfo->EffectBasePoints[0] = 150;
+                break;
             case 38310: // Multi-Shot
             case 53385: // Divine Storm (Damage)
                 spellInfo->MaxAffectedTargets = 4;
diff --git a/src/server/scripts/Northrend/CMakeLists.txt b/src/server/scripts/Northrend/CMakeLists.txt
index 7db3133..d9214c5 100644
--- a/src/server/scripts/Northrend/CMakeLists.txt
+++ b/src/server/scripts/Northrend/CMakeLists.txt
@@ -166,6 +166,7 @@ set(scripts_STAT_SRCS
   Northrend/IcecrownCitadel/icecrown_citadel_trashmobs.cpp
   Northrend/IcecrownCitadel/boss_lord_marrowgar.cpp
   Northrend/IcecrownCitadel/boss_lady_deathwhisper.cpp
+  Northrend/IcecrownCitadel/boss_gunship_battle_wowrean.cpp
   Northrend/IcecrownCitadel/boss_deathbringer_saurfang.cpp
   Northrend/IcecrownCitadel/boss_festergut.cpp
   Northrend/IcecrownCitadel/boss_rotface.cpp
diff --git a/src/server/scripts/Northrend/IcecrownCitadel/boss_gunship_battle_wowrean.cpp b/src/server/scripts/Northrend/IcecrownCitadel/boss_gunship_battle_wowrean.cpp
new file mode 100644
index 0000000..f879435
--- /dev/null
+++ b/src/server/scripts/Northrend/IcecrownCitadel/boss_gunship_battle_wowrean.cpp
@@ -0,0 +1,3359 @@
+/*
+ * Copyright (C) 2008-2012 Trinity <http://www.trinitycore.org/>
+ * Copyright (C) 2010-2012 WoWRean <http://www.wowrean.es/>
+ * Copyright (C) 2009-2012 Eilo <https://github.com/eilo/>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include "icecrown_citadel.h"
+#include "MapManager.h"
+#include "Transport.h"
+#include "Vehicle.h"
+#include "Group.h"
+
+// Logros, esto veremos despues
+enum eAchievements
+{
+    IM_ON_A_BOAT_10    = 4536,
+    IM_ON_A_BOAT_25    = 4612,
+};
+
+// Eventos o fases de la script
+enum Actions
+{
+    ACTION_INTRO_START             = 1,
+    ACTION_BATTLE_EVENT            = 2,
+    ACTION_MAGE_DIE                = 3,
+    ACTION_ROCK_DIE                = 4,
+    ACTION_AXES_RIFL_DIE           = 5,
+    ACTION_DONE                    = 6,
+    ACTION_FAIL                    = 7,
+};
+
+// Vamos a ver, spells pero no todas estan bien, (PARA LUEGO)
+enum Spells
+{
+/* -------- *Muralla de las calaveras* ------- */
+        // AQUI VA LAS SPELLS DEL TRASH //
+
+    // Kor'kron Primalist
+    SPELL_WRATH                       = 69968,
+    SPELL_HEALING_TOUCH               = 69899,
+    SPELL_REGROWTH                    = 69882,
+    SPELL_REJUVENATION                = 69898,
+
+    SPELL_SUMMON_BATTLE_STANDART_A    = 69810,
+    SPELL_SUMMON_BATTLE_STANDART_H    = 69811,
+
+    // Kor'kron Defender
+    SPELL_DEVASTATE                   = 69902,
+    SPELL_THUNDERCLAP                 = 69965,
+    SPELL_SUNDER_ARMOR                = 57807,
+    SPELL_SPELL_REFLECT               = 69901,
+
+    // Skybreaker Vindicator
+    SPELL_AVENGERS_SHIELD             = 69927,
+    SPELL_CONCENTRATION               = 69930,
+    SPELL_HOLY_WRATH                  = 69934,
+
+    // Frostwyrm
+    SPELL_FROST_BREATH                = 70116,
+    SPELL_BLIZZARD                    = 70362,
+    SPELL_FROST_CLEAVE                = 70361,
+
+/* ------------ Spells de la pelea ------------- */
+    SPELL_BURNING_PITCH_A             = 71335,
+    SPELL_BURNING_PITCH_H             = 71339,
+    SPELL_BURNING_PITCH_SIEGE_DMG_A   = 70383,
+    SPELL_BURNING_PITCH_SIEGE_DMG_H   = 70374,
+    SPELL_BURNING_PITCH_AOE_DAMAGE    = 69660,
+
+    SPELL_WOUNDING_STRIKE_10_NM       = 69651,
+    SPELL_WOUNDING_STRIKE_10_HM       = 72570,
+    SPELL_WOUNDING_STRIKE_25_NM       = 72569,
+    SPELL_WOUNDING_STRIKE_25_HM       = 72571,
+
+    SPELL_TELEPORT_VISUAL             = 64446,
+    SPELL_BLADESTORM                  = 69652,
+    SPELL_BLADESTORM_TRIGGER          = 69653,
+
+    // Cannon
+    SPELL_HEAT_DRAIN                  = 69470,
+    SPELL_OVERHEAT                    = 69487, // Triggers spell #69488 every 0.25s. It should consume 10 Energy but does not.
+    SPELL_CANNON_BLAST                = 69399,
+    SPELL_INCINERATING_BLAST          = 69401,
+
+    // Auras
+    SPELL_ON_ORGRIMS_HAMMERS_DECK     = 70121,
+    SPELL_ON_SKYBREAKERS_DECK         = 70120,
+
+/* ------------- Algunas spells de Adds -------------- */
+    // Kor'kron Battle-mage & Skybreaker Sorcerer
+    SPELL_BELOW_ZERO                  = 69705,
+    SPELL_SHADOW_CHANNELING           = 45104,
+
+    // Experience spells
+    SPELL_EXPERIENCED                 = 71188,
+    SPELL_VETERAN                     = 71193,
+    SPELL_ELITE                       = 71195,
+    SPELL_DESPERATE_RESOLVE_10_NM     = 69647,
+    SPELL_DESPERATE_RESOLVE_10_HM     = 72537,
+    SPELL_DESPERATE_RESOLVE_25_NM     = 72536,
+    SPELL_DESPERATE_RESOLVE_25_HM     = 72538,
+
+    // Kor'kron Axethrower & Skybreaker Rifleman
+    SPELL_HURL_AXE                    = 70161,
+    SPELL_SHOOT                       = 70162,
+
+    // Kor'kron Rocketeer & Skybreaker Mortar Soldier
+    SPELL_ROCKET_ARTILLERY_MARKER     = 71371,
+    SPELL_ROCKET_ARTILLERY_TRIGGERED  = 69679,
+    SPELL_ROCKET_ARTILLERY_HORDE      = 69678,
+    SPELL_ROCKET_ARTILLERY_ALLIANCE   = 70609,
+    SPELL_EXPLOSION                   = 69680,
+
+/* ------------- Spell bosses ------------ */
+    // Muradin Bronzebeard / High Overlord Saurfang
+    SPELL_CLEAVE                      = 15284,
+    SPELL_RENDING_THROW               = 70309,
+    SPELL_TASTE_OF_BLOOD              = 69634,
+
+/* -------------- Spells Efectos ------------- */
+    // Ship Explsion
+    SPELL_SHIP_EXPLOSION              = 72137,
+
+    // Remove Rocket Packs
+    SPELL_REMOVE_ROCKET_PACK          = 70713,
+
+/* ---------------- Logros ----------------- */
+    // Achievement spell required target
+    SPELL_ACHIEVEMENT                 = 72959,
+
+    // Achievements
+    SPELL_ACHIEVEMENT_CHECK           = 72959,
+};
+
+// AQUI PONERLE OJO A COMO QUEREMOS QUE QUEDE
+enum Events
+{
+    EVENT_NULL,
+    EVENT_INTRO_ALLIANCE_1, // Muradin Bronzebeard yells: Fire up the engines! We got a meetin' with destiny, lads!
+    EVENT_INTRO_ALLIANCE_2, // Muradin Bronzebeard yells: Hold on to yer hats!
+    EVENT_INTRO_ALLIANCE_3, // Muradin Bronzebeard yells: What in the world is that? Grab me spyglass, crewman!
+    EVENT_INTRO_ALLIANCE_4, // Muradin Bronzebeard yells: By me own beard! HORDE SAILIN' IN FAST 'N HOT!
+    EVENT_INTRO_ALLIANCE_5, // Muradin Bronzebeard yells: EVASIVE ACTION! MAN THE GUNS!
+    EVENT_INTRO_ALLIANCE_6, // Muradin Bronzebeard yells: Cowardly dogs! Ye blindsided us!
+    EVENT_INTRO_ALLIANCE_7, // High Overlord Saurfang yells: This is not your battle, dwarf. Back down or we will be forced to destroy your ship.
+    EVENT_INTRO_ALLIANCE_8, // Muradin Bronzebeard yells: Not me battle? I dunnae who ye think ye are, mister, but I got a score to settle with Arthas and yer not gettin' in me way! FIRE ALL GUNS! FIRE! FIRE!
+
+    EVENT_INTRO_HORDE_1, // High Overlord Saurfang yells: Rise up, sons and daughters of the Horde! Today we battle a hated enemy of the Horde! LOK'TAR OGAR! Kor'kron, take us out!
+    EVENT_INTRO_HORDE_1_1, // Kor'kron, take us out!
+    EVENT_INTRO_HORDE_2, // High Overlord Saurfang yells: What is that?! Something approaching in the distance!
+    EVENT_INTRO_HORDE_3, // High Overlord Saurfang yells: ALLIANCE GUNSHIP! ALL HANDS ON DECK!
+    EVENT_INTRO_HORDE_4, // Muradin Bronzebeard yells: Move yer jalopy or we'll blow it out of the sky, orc! The Horde's got no business here!
+    EVENT_INTRO_HORDE_5, // High Overlord Saurfang yells: You will know our business soon! KOR'KRON, ANNIHILATE THEM!
+
+    EVENT_OUTRO_ALLIANCE_1,
+    EVENT_OUTRO_ALLIANCE_2,
+    EVENT_OUTRO_ALLIANCE_3,
+
+    EVENT_OUTRO_HORDE_1,
+    EVENT_OUTRO_HORDE_2,
+    EVENT_OUTRO_HORDE_3,
+    
+   //Fly
+    EVENT_START_FLY,
+
+   //Misc battle
+    EVENT_WALK_MOBS,
+    EVENT_SUMMON_PORTAL,
+    EVENT_FREEZE_CANNON,
+    EVENT_SHADOW_CHANNELING,
+    EVENT_UNSUMMON_PORTAL,
+    EVENT_BOARDING_GUNSHIP,
+    EVENT_BOARDING_TALK,
+    EVENT_BURNING_PITCH,
+    EVENT_WOUNDING_STRIKE,
+    EVENT_BLADE_STORM,
+    EVENT_DONE,
+    EVENT_FAIL,
+    EVENT_RESTART_EVENT,
+    EVENT_BOARDING_REAVERS_MARINE,
+    EVENT_WIPE_CHECK,
+
+   // Rampart of Skulls NPCs Events
+    EVENT_WRATH,
+    EVENT_HEAL,
+
+    EVENT_SUNDER_ARMOR,
+    EVENT_SPELL_REFLECT,
+    EVENT_THUNDERCLAP,
+    EVENT_DEVASTATE,
+
+    EVENT_FROST_BREATH,
+    EVENT_BLIZZARD,
+    EVENT_CLEAVE,
+
+    // Skybreaker Vindicator
+    EVENT_AVENGERS_SHILED,
+    EVENT_CONCENTRATION,
+    EVENT_HOLY_WRATH,
+
+    // First Squad Assisted
+    EVENT_FIRST_SQUAD_ASSISTED_1,
+    EVENT_FIRST_SQUAD_ASSISTED_2,
+
+    // Second Squad Assisted
+    EVENT_SECOND_SQUAD_ASSISTED_1,
+    EVENT_SECOND_SQUAD_ASSISTED_2,
+    EVENT_SECOND_SQUAD_ASSISTED_3,
+
+    // Shared experience events
+    EVENT_EXPERIENCED,
+    EVENT_VETERAN,
+    EVENT_ELITE,
+    EVENT_ATACK_START,
+
+    // Kor'kron Axethrower & Skybreaker Rifleman
+    EVENT_HURL_AXE,
+    EVENT_SHOOT,
+
+    // Kor'kron Rocketeer & Skybreaker Mortar Soldier
+    EVENT_ROCKET_ART,
+
+    // Muradin Bronzebeard & High Overlord Saurfang
+    EVENT_RENDING_THROW,
+    EVENT_TASTE_OF_BLOOD,
+
+    // Misc (used in various NPCs)
+    EVENT_SPAWN_MAGE,
+    EVENT_RESPAWN_AXES_RIFLEMEN,
+    EVENT_RESPAWN_ROCKETEER,
+};
+
+// Textos: Traducir y apañar
+enum Texts
+{
+    // Kor'kron Primalist
+    SAY_FIRST_SQUAD_RESCUED_HORDE_0  = 0,
+
+    // Kor'kron Invoker
+    SAY_FIRST_SQUAD_RESCUED_HORDE_1  = 0,
+
+    // Kor'kron Defender
+    SAY_SECOND_SQUAD_RESCUED_HORDE_0 = 0,
+    SAY_SECOND_SQUAD_RESCUED_HORDE_1 = 1,
+    SAY_FROSTWYRM_SUMMON_0           = 2,
+    SAY_FROSTWYRM_SUMMON_1           = 3,
+
+    // Skybreaker Vindicator
+    SAY_FIRST_SQUAD_RESCUED_ALLIANCE_0  = 0,
+
+    // Skybreaker Sorcerer
+    SAY_FIRST_SQUAD_RESCUED_ALLIANCE_1  = 0,
+
+    // Skybreaker Protector
+    SAY_SECOND_SQUAD_RESCUED_ALLIANCE_0 = 0,
+    SAY_SECOND_SQUAD_RESCUED_ALLIANCE_1 = 1,
+    SAY_SECOND_SQUAD_RESCUED_ALLIANCE_2 = 2,
+
+    // Kor'kron Invoker & Skybreaker Sorcerer
+    SAY_SUMMON_BATTLE_STANDARD          = 1,
+
+    // Froswyrm
+    SAY_FROSTWYRM_LAND_H_0           = 0,
+    SAY_FROSTWYRM_LAND_A_1           = 1,
+
+    // Muradin Bronzebeard
+    SAY_INTRO_ALLIANCE_0             = 0,
+    SAY_INTRO_ALLIANCE_1             = 1,
+    SAY_INTRO_ALLIANCE_2             = 2,
+    SAY_INTRO_ALLIANCE_3             = 3,
+    SAY_INTRO_ALLIANCE_4             = 4,
+    SAY_INTRO_ALLIANCE_5             = 5,
+    SAY_INTRO_ALLIANCE_7             = 6,
+    SAY_INTRO_HORDE_3                = 7,
+    SAY_BOARDING_SKYBREAKER_1        = 8,
+    SAY_BOARDING_ORGRIMS_HAMMER_0    = 9,
+    SAY_NEW_RIFLEMEN_SPAWNED         = 10,
+    SAY_NEW_MORTAR_TEAM_SPAWNED      = 11,
+    SAY_NEW_MAGE_SPAWNED             = 12,
+    SAY_ALLIANCE_VICTORY             = 13,
+    SAY_ALLIANCE_DEFEAT              = 14, // How will we handle that case ? Ie. the player loses
+
+    // High Overlord Saurfang
+    SAY_INTRO_HORDE_0                = 0,
+    SAY_INTRO_HORDE_0_1              = 1,
+    SAY_INTRO_HORDE_1                = 2,
+    SAY_INTRO_HORDE_2                = 3,
+    SAY_INTRO_HORDE_4                = 4,
+    SAY_BOARDING_SKYBREAKER_0        = 5,
+    SAY_BOARDING_ORGRIMS_HAMMER_1    = 6,
+    SAY_NEW_AXETHROWER_SPAWNED       = 7,
+    SAY_NEW_ROCKETEERS_SPAWNED       = 8,
+    SAY_NEW_BATTLE_MAGE_SPAWNED      = 9,
+    SAY_HORDE_VICTORY                = 10,
+    SAY_HORDE_DEFEAT                 = 11, // How will we handle that case ? Ie. the player loses
+
+    SAY_HIGH_OVERLORD_SAURFANG_NOT_VISUAL = 0,
+    SAY_BOARDING_SKYBREAKER_SAURFANG      = 1,
+    SAY_MURADIN_BRONZEBEARD_NOT_VISUAL    = 0,
+    SAY_BOARDING_SKYBREAKER_MURADIN       = 1,
+};
+
+// ****OJO****
+// Hay que ver si en primer lugar estan volando estos 2
+Position const FrostWyrmPosH   = {-435.429f, 2077.556f, 219.1148f, 4.767166f};
+Position const FrostWyrmPosA   = {-437.409f, 2349.026f, 219.1148f, 1.483120f};
+
+struct mortarMarksLoc
+{
+    uint32 durationBeforeRefreshing;
+    Position location;
+};
+/* --------------------------------------------------------------------------------------------------------------------- */
+/* -------------------------- HOOKS ESPECIALES Y LOCALES PARA EL FUNCIONAMIENTO DEL SCRIPT ----------------------------- */
+/* --------------------------------------------------------------------------------------------------------------------- */
+
+// Aqui hay que ponerle mucho ojo a las funciones porque algunas hacen uso del mapa
+// sin tener en cuenta la grilla o las criaturas con caracteristicas especiales
+// ahora ya sabemos de que van, y lo primero es verificar el AI de los npcs, si no
+// se comportan como deben, entonces habra que retocar estas 3 funciones para localizar
+// sus respectivos targets y demas.
+//                 |
+//                 |
+//                 V
+typedef std::list<Player*> TPlayerLists;
+
+TPlayerLists GetPlayersInTheMaps(Map *pMap)
+{
+    TPlayerLists players;
+    const Map::PlayerList &PlayerList = pMap->GetPlayers();
+    if (!PlayerList.isEmpty())
+        for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
+            if (Player* player = i->getSource())
+                players.push_back(player);
+    return players;
+}
+
+Player* SelectRandomPlayerFromLists(TPlayerLists &players)
+{
+    if (players.empty())
+        return NULL;
+    TPlayerLists::iterator it = players.begin();
+    std::advance(it, urand(0, players.size()-1));
+    return *it;
+}
+
+Player* SelectRandomPlayerInTheMaps(Map* pMap)
+{
+    TPlayerLists players = GetPlayersInTheMaps(pMap);
+    return SelectRandomPlayerFromLists(players);
+}
+
+// Funcion para Aplicar el movimiento en el cliente
+void UpdateTransportMotionInMap(Transport* t)
+{
+    Map* map = t->GetMap();
+
+    for (Map::PlayerList::const_iterator itr = map->GetPlayers().begin(); itr != map->GetPlayers().end(); ++itr)
+    {
+        if (Player* pPlayer = itr->getSource())
+        {
+            UpdateData transData;
+            t->BuildCreateUpdateBlockForPlayer(&transData, pPlayer);
+            WorldPacket packet;
+            transData.BuildPacket(&packet);
+            pPlayer->SendDirectMessage(&packet);
+        }
+    }
+}
+
+//Function start motion of the ship
+void StartFlyShip(Transport* t)
+{
+    t->BuildStartMovePacket(t->GetMap());
+    t->SetUInt32Value(GAMEOBJECT_DYNAMIC, 0x10830010); // Seen in sniffs
+    t->SetFloatValue(GAMEOBJECT_PARENTROTATION + 3, 1.0f);
+
+    std::set<uint32> mapsUsed;
+    GameObjectTemplate const* goinfo = t->GetGOInfo();
+
+    t->GenerateWaypoints(goinfo->moTransport.taxiPathId, mapsUsed);
+
+    UpdateTransportMotionInMap(t);
+}
+
+// A este Relocate hay que ponerle atencion para despues
+void RelocateTransport(Transport* t)
+{
+    Map* map = t->GetMap();
+    InstanceScript* instance = t->GetInstanceScript();
+
+    if (!t || !instance)
+        return;
+
+    // Transoprt movemend on server-side is ugly hack, so we do sincronize positions
+    switch (t->GetEntry())
+    {
+        case GO_THE_SKYBREAKER_ALLIANCE_ICC:
+            if (instance->GetBossState(DATA_GUNSHIP_EVENT) != DONE)
+                t->Relocate(-377.184021f, 2073.548584f, 445.753387f);
+            else if (instance->GetBossState(DATA_GUNSHIP_EVENT) == DONE)
+                t->Relocate(-583.942627f, 2212.364990f, 534.673889f);
+            break;
+        case GO_ORGRIM_S_HAMMER_ALLIANCE_ICC:
+            if (instance->GetBossState(DATA_GUNSHIP_EVENT) != DONE)
+                t->Relocate(-384.878479f, 1989.831665f, 431.549438f);
+            break;
+        case GO_ORGRIM_S_HAMMER_HORDE_ICC:
+            if (instance->GetBossState(DATA_GUNSHIP_EVENT) != DONE)
+                t->Relocate(-438.142365f, 2395.725830f, 436.781647f);
+            else if (instance->GetBossState(DATA_GUNSHIP_EVENT) == DONE)
+                t->Relocate(-583.942627f, 2212.364990f, 534.673889f);
+            break;
+        case GO_THE_SKYBREAKER_HORDE_ICC:
+            if (instance->GetBossState(DATA_GUNSHIP_EVENT) != DONE)
+                t->Relocate(-435.854156f, 2475.328125f, 449.364105f);
+            break;
+    }
+    // Chequear cada 100ms la AI de la nave y su actualizacion.
+    t->Update(100);
+}
+
+//Function stop motion of the ship
+void StopFlyShip(Transport* t)
+{
+    t->m_WayPoints.clear();
+    RelocateTransport(t);
+    t->BuildStopMovePacket(t->GetMap());
+
+    UpdateTransportMotionInMap(t);
+    // Actualizando sus estados antes de bajarse.
+    t->UpdatePlayerPositions();
+}
+
+//Find Unfriendy transport
+Transport* CheckUnfriendlyShip(Creature* me, InstanceScript* instance, uint32 data)
+{
+    if(Creature* pCapitan = ObjectAccessor::GetCreature(*me, instance->GetData64(data)))
+        return pCapitan->GetTransport();
+    else
+        return NULL;
+}
+
+//Teleport players  <----------------- Esto es para cuando se reinicia el evento, al mapa de icc
+void TeleportPlayers(Map* map, uint64 TeamInInstance)
+{
+    if(map)
+    {
+        Map::PlayerList const &lPlayers = map->GetPlayers();
+        if (!lPlayers.isEmpty())
+        {
+            for(Map::PlayerList::const_iterator itr = lPlayers.begin(); itr != lPlayers.end(); ++itr)
+            {
+                if (Player* pPlayer = itr->getSource())
+                {
+                    if (pPlayer->isDead() && !pPlayer->HasFlag(PLAYER_FLAGS, PLAYER_FLAGS_GHOST))
+                        pPlayer->ResurrectPlayer(1.0f);
+
+                    if(TeamInInstance == ALLIANCE)
+                        pPlayer->TeleportTo(631, -437.498505f, 2425.954f, 192.997f, 2.247f);
+                    else
+                        pPlayer->TeleportTo(631, -437.498505f, 1997.954f, 192.997f, 2.247f);
+                }
+            }
+        }
+    }
+}
+
+//Ship explosion <-- Aqui cuando se termina o cuando wipeas :S
+void DoShipExplosion(Transport* t)
+{
+    for (Transport::CreatureSet::iterator itr = t->m_NPCPassengerSet.begin(); itr != t->m_NPCPassengerSet.end();)
+    {
+        if (Creature* npc = *itr)
+        {
+            if(npc->GetEntry() == NPC_GB_GUNSHIP_HULL)
+                npc->CastSpell(npc, SPELL_SHIP_EXPLOSION, true);
+        }
+        ++itr;
+    }
+}
+
+//Wipe check
+bool DoWipeCheck(Transport* t)
+{
+    for (Transport::PlayerSet::const_iterator itr = t->GetPassengers().begin(); itr != t->GetPassengers().end();)
+    {
+        Player* plr = *itr;
+        ++itr;
+
+        if (plr && plr->isAlive())
+            return true;
+    }
+    return false;
+}
+
+// ****OJO**** Aqui se puede hacer cosillas adicionales para npcs en algun caso
+//Check falling players
+void DoCheckFallingPlayer(Creature* me)
+{
+    Map* map = me->GetMap();
+
+    if(map)
+    {
+        Map::PlayerList const &lPlayers = map->GetPlayers();
+        if (!lPlayers.isEmpty())
+        {
+            for(Map::PlayerList::const_iterator itr = lPlayers.begin(); itr != lPlayers.end(); ++itr)
+            {
+                if (Player* pPlayer = itr->getSource())
+                {
+                    if (pPlayer->GetPositionZ() < 420.0f && pPlayer->IsWithinDistInMap(me, 300.0f))
+                        pPlayer->NearTeleportTo(me->GetPositionX(), me->GetPositionY(), me->GetPositionZ() + 5.0f, me->GetOrientation());
+                }
+            }
+        }
+    }
+}
+
+// ***** OJO *****
+// Esta parte de la script es una mierda, hay que mirar como spamearlo de otra manera, lo mismo que en el preparegunshipevent();
+// Restart event
+void RestartEvent(Transport* t1, Transport* t2, Map* instance, uint64 TeamInInstance)
+{
+    sMapMgr->UnLoadTransportFromMap(t1);
+    sMapMgr->UnLoadTransportFromMap(t2);
+
+    Map::PlayerList const& players = instance->GetPlayers();
+    if (players.isEmpty())
+        return;
+
+                if(TeamInInstance == ALLIANCE)
+                {
+                    if(Transport* th = sMapMgr->LoadTransportInMap(instance, GO_ORGRIM_S_HAMMER_ALLIANCE_ICC, 108000))
+                    {
+                        th->AddNPCPassengerInInstance(NPC_GB_ORGRIMS_HAMMER, 1.845810f, 1.268872f, 34.526218f, 1.5890f);
+                        th->AddNPCPassengerInInstance(NPC_GB_HIGH_OVERLORD_SAURFANG, 37.18615f, 0.00016f, 36.78849f, 3.13683f);
+                        th->AddNPCPassengerInInstance(NPC_GB_INVISIBLE_STALKER, 37.18615f, 0.00016f, 36.78849f, 3.13683f);
+                        th->AddNPCPassengerInInstance(NPC_GB_KORKRON_BATTLE_MAGE, 47.2929f, -4.308941f, 37.5555f, 3.05033f);
+                        th->AddNPCPassengerInInstance(NPC_GB_KORKRON_BATTLE_MAGE, 47.34621f, 4.032004f, 37.70952f, 3.05033f);
+                        th->AddNPCPassengerInInstance(NPC_GB_KORKRON_BATTLE_MAGE, 15.03016f, 0.00016f, 37.70952f, 1.55138f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -13.19547f, -27.160213f, 35.47252f, 3.10672f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -18.33902f, -25.230491f, 33.04052f, 3.00672f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -60.1251f, -1.27014f, 42.8335f, 5.16073f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -48.2651f, 16.78034f, 34.2515f, 0.04292f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -14.8356f, 27.931688f, 33.363f, 1.73231f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 10.2702f, 20.62966f, 35.37483f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 39.32459f, 14.50176f, 36.88428f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 46.17223f, -6.638763f, 37.35444f, 1.32f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 27.4456f, -13.397498f, 36.34746f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 18.16184f, 1.37897f, 35.31705f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -18.11516f, -0.196236f, 45.15709f, 2.9f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -18.11844f, -0.19624f, 49.18192f, 1.6f);
+
+                        if (instance->ToInstanceMap()->GetMaxPlayers() == 10)
+                        {
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -3.170555f, 28.30652f, 34.21082f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -12.0928f, 27.65942f, 33.58557f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 14.92804f, 26.18018f, 35.47803f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 24.70331f, 25.36584f, 35.97845f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, -11.44849f, -25.71838f, 33.64343f, 1.49248f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, 12.30336f, -25.69653f, 35.32373f, 1.49248f);
+                        }                        
+                        else
+                        {
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -3.170555f, 28.30652f, 34.21082f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -12.0928f, 27.65942f, 33.58557f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 14.92804f, 26.18018f, 35.47803f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 24.70331f, 25.36584f, 35.97845f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 19.92804f, 27.18018f, 35.47803f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -7.70331f, 28.36584f, 33.88557f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, -11.44849f, -25.71838f, 33.64343f, 1.49248f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, 12.30336f, -25.69653f, 35.32373f, 1.49248f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, -3.44849f, -25.71838f, 34.21082f, 1.49248f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, 3.30336f, -25.69653f, 35.32373f, 1.49248f);
+                        }
+                    }
+
+                    if(Transport* t = sMapMgr->LoadTransportInMap(instance, GO_THE_SKYBREAKER_ALLIANCE_ICC, 108000))
+                    {
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER, -17.156807f, -1.633260f, 20.81273f, 4.52672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_MURADIN_BRONZEBEARD, 13.51547f, -0.160213f, 20.87252f, 3.10672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_HIHG_CAPTAIN_JUSTIN_BARTLETT, 42.78902f, -0.010491f, 25.24052f, 3.00672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_HIGH_OVERLORD_SAURFANG_NOT_VISUAL, -12.9806f, -22.9462f, 21.659f, 4.72416f);
+                        t->AddNPCPassengerInInstance(NPC_GB_ZAFOD_BOOMBOX, 18.8042f, 9.907914f, 20.33559f, 3.10672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_DECKHAND, -64.8423f, 4.4658f, 23.4352f, 2.698897f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_DECKHAND, 35.54972f, 19.93269f, 25.0333f, 4.71242f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_DECKHAND, -36.39837f, 3.13127f, 20.4496f, 1.5708f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_DECKHAND, -36.23974f, -2.75767f, 20.4506f, 4.69496f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_DECKHAND, 41.94677f, 44.08411f, 24.66587f, 1.62032f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 13.51547f, -0.160213f, 20.87252f, 3.10672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 42.78902f, -0.010491f, 25.24052f, 3.00672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 14.0551f, 3.65014f, 20.7935f, 3.16073f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 14.0551f, -4.65034f, 20.7915f, 3.04292f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -17.8356f, 0.031688f, 20.823f, 4.73231f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -34.2702f, -26.18966f, 21.37483f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -11.64459f, -19.85176f, 20.88428f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -19.88223f, -6.578763f, 20.57444f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -41.4456f, -7.647498f, 20.49746f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 0.554884f, -1.232897f, 20.53705f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -50.16516f, 9.716236f, 23.58709f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 11.45844f, 16.36624f, 20.54192f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 19.72286f, -2.193787f, 33.06982f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 19.72286f, -2.193787f, 33.06982f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 8.599396f, -28.55855f, 24.79919f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 38.94339f, -33.808f,  25.39618f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 58.15474f, 0.748094f, 41.87663f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 5.607554f, -6.350654f, 34.00357f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 4.780305f, -29.05227f, 35.09634f, 1.6f);
+
+                        if (instance->ToInstanceMap()->GetMaxPlayers() == 10)
+                        {
+                            t->AddNPCPassengerInInstance(NPC_GB_ALLIANCE_CANON, -5.15231f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_ALLIANCE_CANON, -28.0876f, -22.9462f, 21.659f, 4.72416f);
+                        }
+                        else
+                        {
+                            t->AddNPCPassengerInInstance(NPC_GB_ALLIANCE_CANON, -5.15231f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_ALLIANCE_CANON, -14.9806f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_ALLIANCE_CANON, -21.7406f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_ALLIANCE_CANON, -28.0876f, -22.9462f, 21.659f, 4.72416f);
+                        }
+                    }
+                }
+
+                if(TeamInInstance == HORDE)
+                {
+                    if(Transport* t = sMapMgr->LoadTransportInMap(instance, GO_THE_SKYBREAKER_HORDE_ICC, 77800))
+                    {
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER, -17.156807f, -1.633260f, 20.81273f, 4.52672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_MURADIN_BRONZEBEARD, 13.51547f, -0.160213f, 20.87252f, 3.10672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_HIHG_CAPTAIN_JUSTIN_BARTLETT, 42.78902f, -0.010491f, 25.24052f, 3.00672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_SORCERERS, 14.0551f, 3.65014f, 20.7935f, 3.16073f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_SORCERERS, 14.0551f, -4.65034f, 20.7915f, 3.04292f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_SORCERERS, -17.8356f, 0.031688f, 20.823f, 4.73231f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 13.51547f, -0.160213f, 20.87252f, 3.10672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 42.78902f, -0.010491f, 25.24052f, 3.00672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 14.0551f, 3.65014f, 20.7935f, 3.16073f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 14.0551f, -4.65034f, 20.7915f, 3.04292f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -17.8356f, 0.031688f, 20.823f, 4.73231f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -34.2702f, -26.18966f, 21.37483f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -11.64459f, -19.85176f, 20.88428f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -19.88223f, -6.578763f, 20.57444f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -41.4456f, -7.647498f, 20.49746f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 0.554884f, -1.232897f, 20.53705f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -50.16516f, 9.716236f, 23.58709f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 11.45844f, 16.36624f, 20.54192f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 19.72286f, -2.193787f, 33.06982f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 19.72286f, -2.193787f, 33.06982f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 8.599396f, -28.55855f, 24.79919f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 38.94339f, -33.808f,  25.39618f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 58.15474f, 0.748094f, 41.87663f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 5.607554f, -6.350654f, 34.00357f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 4.780305f, -29.05227f, 35.09634f, 1.6f);
+
+                        if(instance->ToInstanceMap()->GetMaxPlayers() == 10)
+                        {
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -5.15231f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -14.9806f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -21.7406f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -28.0876f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -8.61003f, 15.483f, 20.4158f, 4.69854f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -27.9583f, 14.8875f, 20.4428f, 4.77865f);
+                        }
+                        else
+                        {
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, 0.15231f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -5.15231f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -14.9806f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -21.7406f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -28.0876f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -33.0876f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -8.61003f, 15.483f, 20.4158f, 4.69854f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -27.9583f, 14.8875f, 20.4428f, 4.77865f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -15.61003f, 15.483f, 20.4158f, 4.69854f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -20.9583f, 14.8875f, 20.4428f, 4.77865f);
+                        }
+                    }
+                
+                    if(Transport* th = sMapMgr->LoadTransportInMap(instance,GO_ORGRIM_S_HAMMER_HORDE_ICC, 77800))
+                    {
+                        th->AddNPCPassengerInInstance(NPC_GB_ORGRIMS_HAMMER, 1.845810f, 1.268872f, 34.526218f, 1.5890f);
+                        th->AddNPCPassengerInInstance(NPC_GB_HIGH_OVERLORD_SAURFANG, 37.18615f, 0.00016f, 36.78849f, 3.13683f);
+                        th->AddNPCPassengerInInstance(NPC_GB_MURADIN_BRONZEBEARD_NOT_VISUAL, -7.09684f, 30.582f, 34.5013f, 1.53591f);
+                        th->AddNPCPassengerInInstance(NPC_GB_INVISIBLE_STALKER, 37.30764f, -0.143823f, 36.7936f, 3.13683f);
+                        th->AddNPCPassengerInInstance(NPC_GB_ZAFOD_BOOMBOX, 35.18615f, 15.30652f, 37.64343f, 3.05033f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -13.19547f, -27.160213f, 35.47252f, 3.10672f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -18.33902f, -25.230491f, 33.04052f, 3.00672f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -60.1251f, -1.27014f, 42.8335f, 5.16073f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -48.2651f, 16.78034f, 34.2515f, 0.04292f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -14.8356f, 27.931688f, 33.363f, 1.73231f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 10.2702f, 20.62966f, 35.37483f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 39.32459f, 14.50176f, 36.88428f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 46.17223f, -6.638763f, 37.35444f, 1.32f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 27.4456f, -13.397498f, 36.34746f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 18.16184f, 1.37897f, 35.31705f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -18.11516f, -0.196236f, 45.15709f, 2.9f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -18.11844f, -0.19624f, 49.18192f, 1.6f);
+
+                        if(instance->ToInstanceMap()->GetMaxPlayers() == 10)
+                        {
+                            th->AddNPCPassengerInInstance(NPC_GB_HORDE_CANON, 22.6225f, 28.9309f, 36.3929f, 1.53591f);
+                            th->AddNPCPassengerInInstance(NPC_GB_HORDE_CANON, -21.7509f, 29.4207f, 34.2588f, 1.53591f);
+                        }
+                        else
+                        {
+                            th->AddNPCPassengerInInstance(NPC_GB_HORDE_CANON, 22.6225f, 28.9309f, 36.3929f, 1.53591f);
+                            th->AddNPCPassengerInInstance(NPC_GB_HORDE_CANON, 9.87745f, 30.5047f, 35.7147f, 1.53591f);
+                            th->AddNPCPassengerInInstance(NPC_GB_HORDE_CANON, -7.09684f, 30.582f, 34.5013f, 1.53591f);
+                            th->AddNPCPassengerInInstance(NPC_GB_HORDE_CANON, -21.7509f, 29.4207f, 34.2588f, 1.53591f);
+                        }
+                    }
+                }
+
+}
+
+//Stop Fight <-- Aqui es donde mueren los npcs luego que esta explotando la nave y te saca del barco antes de reiniciar
+void StopFight(Transport* t1, Transport* t2)
+{
+    Map* map = t1->GetMap();
+
+    for (Transport::CreatureSet::iterator itr = t1->m_NPCPassengerSet.begin(); itr != t1->m_NPCPassengerSet.end();)
+    {
+        if (Creature *npc = *itr)
+        {
+            if(npc->GetEntry() != NPC_GB_SKYBREAKER && npc->GetEntry() != NPC_GB_ORGRIMS_HAMMER && npc->GetEntry() != NPC_GB_HIGH_OVERLORD_SAURFANG
+            && npc->GetEntry() != NPC_GB_MURADIN_BRONZEBEARD && npc->GetEntry() != NPC_GB_GUNSHIP_HULL)
+            {
+                if (Vehicle* veh = npc->GetVehicleKit())
+                    veh->RemoveAllPassengers();
+                npc->Kill(npc);
+            }
+        }
+        ++itr;
+    }
+
+    for (Transport::CreatureSet::iterator itr = t2->m_NPCPassengerSet.begin(); itr != t2->m_NPCPassengerSet.end();)
+    {
+        if (Creature *npc = *itr)
+        {
+            if(npc->GetEntry() != NPC_GB_GUNSHIP_HULL && npc->GetEntry() != NPC_GB_SKYBREAKER && npc->GetEntry() != NPC_GB_ORGRIMS_HAMMER)
+                npc->Kill(npc);
+        }
+        ++itr;
+    }
+
+    for (Map::PlayerList::const_iterator itr = map->GetPlayers().begin(); itr != map->GetPlayers().end(); ++itr)
+    {
+        if (Player* pPlayer = itr->getSource())
+            pPlayer->CombatStop();
+    }
+}
+
+/* --------------------------------------------------------------------------------------------------------------------- */
+/* ------------------                   DESDE AQUI LOS BOSSES/NPCS aqui esta lo guapo :)                ---------------- */
+/* --------------------------------------------------------------------------------------------------------------------- */
+
+// Esto en gran parte esta bien, es mas que nada scriptar el comportamiento
+// de todos y cada uno de los npcs, y bosses relativos a la pelea, es decir
+// para estar mas seguros esto primero hay que probarlo en tierra o en la caja
+// de testeos, de manera que se evidencie que los mismos esten ejecutando todas
+// y cada una de las cosas para lo que se supone que estan, porque ya se ha visto
+// que algunas cosas falta corregir, pero esto lo dejaremos para luego.
+
+// Gunship: Aqui va Muradin Bronzebeard el barbon
+class npc_muradin_gunship : public CreatureScript
+{
+    public:
+        npc_muradin_gunship() : CreatureScript("npc_muradin_gunship") { }
+
+        bool OnGossipHello(Player* player, Creature* pCreature)
+        {
+            InstanceScript* pInstance = pCreature->GetInstanceScript();
+            if (pInstance && pInstance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+            {
+                if ((!player->GetGroup() || !player->GetGroup()->IsLeader(player->GetGUID())) && !player->isGameMaster())
+                {
+                    player->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, "I'm not the raid leader...", GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+2);
+                    player->SEND_GOSSIP_MENU(DEFAULT_GOSSIP_MESSAGE, pCreature->GetGUID());
+                    return true;
+                }
+
+                player->ADD_GOSSIP_ITEM(0, "My companions are all accounted for, Muradin. Let's go!", 631, 1001);
+                player->SEND_GOSSIP_MENU(player->GetGossipTextId(pCreature), pCreature->GetGUID());
+                return true;
+            }
+            return false;
+        }
+
+        bool OnGossipSelect(Player* player, Creature* pCreature, uint32 /*sender*/, uint32 action)
+        {
+            InstanceScript* instance = pCreature->GetInstanceScript();
+            player->PlayerTalkClass->ClearMenus();
+            player->CLOSE_GOSSIP_MENU();
+
+            if (action == GOSSIP_ACTION_INFO_DEF+2)
+                pCreature->MonsterSay("I'll wait for the raid leader.", LANG_UNIVERSAL, player->GetGUID());
+
+            if (action == 1001)
+            {
+                pCreature->AI()->DoAction(ACTION_INTRO_START);
+                pCreature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            }
+            return true;
+        }
+
+        struct npc_muradin_gunshipAI : public ScriptedAI
+        {
+            npc_muradin_gunshipAI(Creature *creature) : ScriptedAI(creature),
+                _instance(creature->GetInstanceScript())
+            {
+
+            }
+
+            void Reset()
+            {
+                if (_instance->GetBossState(DATA_GUNSHIP_EVENT) == IN_PROGRESS)
+                    return;
+                me->SetReactState(REACT_PASSIVE);
+                me->setFaction(1802);
+                events.Reset();
+                map = me->GetMap();
+                skybreaker = me->GetTransport();
+                SummonCount = RAID_MODE(3, 5, 4, 6);
+                count = 0;
+                RocketerCount = RAID_MODE(2, 4, 2, 4);
+                RiflCount = RAID_MODE(4, 6, 4, 6);
+                RocketerDieCount = 0;
+                RiflDieCount = 0;
+                me->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+                EventScheduled = false;
+            }
+
+            void SendMusicToPlayers(uint32 musicId) const
+            {
+                WorldPacket data(SMSG_PLAY_MUSIC, 4);
+                data << uint32(musicId);
+                SendPacketToPlayers(&data);
+            }
+
+            // Send packet to all players
+            void SendPacketToPlayers(WorldPacket const* data) const
+            {
+                Map::PlayerList const& players = me->GetMap()->GetPlayers();
+                if (!players.isEmpty())
+                    for (Map::PlayerList::const_iterator itr = players.begin(); itr != players.end(); ++itr)
+                        if (Player* player = itr->getSource())
+                            player->GetSession()->SendPacket(data);
+            }
+
+            bool CanAIAttack(Unit const* target) const
+            {
+                if (target->GetEntry() == NPC_GB_KORKRON_SERGANTE || target->GetEntry() == NPC_GB_KORKRON_REAVERS || target->GetTypeId() == TYPEID_PLAYER)
+                    return true;
+
+                return false;
+            }
+
+            void DoAction(int32 const action)
+            {
+                switch (action)
+                {
+                    case ACTION_INTRO_START:
+                        events.ScheduleEvent(EVENT_INTRO_ALLIANCE_1, 1000);
+                        events.ScheduleEvent(EVENT_START_FLY, 2500);
+                        events.ScheduleEvent(EVENT_INTRO_ALLIANCE_2, 7000);
+                        events.ScheduleEvent(EVENT_INTRO_ALLIANCE_3, 28000);
+                        events.ScheduleEvent(EVENT_INTRO_ALLIANCE_4, 35000);
+                        events.ScheduleEvent(EVENT_INTRO_ALLIANCE_5, 40000);
+                        events.ScheduleEvent(EVENT_INTRO_ALLIANCE_6, 47000);
+                        events.ScheduleEvent(EVENT_INTRO_ALLIANCE_7, 53000);
+                        events.ScheduleEvent(EVENT_INTRO_ALLIANCE_8, 58900);
+                        break;
+                    case ACTION_BATTLE_EVENT:
+                    {
+                        if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+                            events.ScheduleEvent(EVENT_WIPE_CHECK, 5000);
+
+                        Creature* pAllianceBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_SKYBREAKER_BOSS));
+                        Creature* pHordeBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_ORGRIMMAR_HAMMER_BOSS));
+
+                        if (pHordeBoss && pAllianceBoss)
+                        {
+                             me->SetReactState(REACT_AGGRESSIVE);
+                             pHordeBoss->SetInCombatWith(pAllianceBoss);
+                             pAllianceBoss->SetInCombatWith(pHordeBoss);
+                             pAllianceBoss->AddThreat(pHordeBoss, 0.0f);
+                             pHordeBoss->AddThreat(pAllianceBoss, 0.0f);
+                             _instance->SetBossState(DATA_GUNSHIP_EVENT, IN_PROGRESS);
+                             events.ScheduleEvent(EVENT_SUMMON_PORTAL, 30000);
+                             RelocateTransport(skybreaker);
+                             RelocateTransport(CheckUnfriendlyShip(me,_instance, DATA_GB_HIGH_OVERLORD_SAURFANG));
+                        }
+                        else
+                            me->AI()->DoAction(ACTION_FAIL);
+                        break;
+                    }
+                    case ACTION_DONE:
+                        if (Creature* pAllianceBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_SKYBREAKER_BOSS)))
+                        {
+                            _instance->SendEncounterUnit(ENCOUNTER_FRAME_REMOVE, pAllianceBoss);
+                        }
+                        if (Creature* pHordeBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_ORGRIMMAR_HAMMER_BOSS)))
+                        {
+                            _instance->SendEncounterUnit(ENCOUNTER_FRAME_REMOVE, pHordeBoss);
+                        }
+
+                        me->SetReactState(REACT_PASSIVE);
+                        _instance->SetBossState(DATA_GUNSHIP_EVENT, DONE);
+                        _instance->DoCastSpellOnPlayers(SPELL_REMOVE_ROCKET_PACK);
+                        Talk(SAY_ALLIANCE_VICTORY);
+                        StartFlyShip(CheckUnfriendlyShip(me, _instance, DATA_GB_HIGH_OVERLORD_SAURFANG));
+                        StopFight(skybreaker, CheckUnfriendlyShip(me, _instance, DATA_GB_HIGH_OVERLORD_SAURFANG));
+                        events.CancelEvent(EVENT_WIPE_CHECK);
+                        events.ScheduleEvent(EVENT_OUTRO_ALLIANCE_1, 3500);
+                        events.ScheduleEvent(EVENT_OUTRO_ALLIANCE_2, 23000);
+                        events.ScheduleEvent(EVENT_OUTRO_ALLIANCE_3, 32000);
+                        break;
+                    case ACTION_FAIL:
+                        events.CancelEvent(EVENT_WIPE_CHECK);
+                        Talk(SAY_ALLIANCE_DEFEAT);
+                        if (Creature* pAllianceBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_SKYBREAKER_BOSS)))
+                        {
+                            _instance->SendEncounterUnit(ENCOUNTER_FRAME_REMOVE, pAllianceBoss);
+                        }
+                        if (Creature* pHordeBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_ORGRIMMAR_HAMMER_BOSS)))
+                        {
+                            _instance->SendEncounterUnit(ENCOUNTER_FRAME_REMOVE, pHordeBoss);
+                        }
+                        StopFight(skybreaker, CheckUnfriendlyShip(me, _instance, DATA_GB_HIGH_OVERLORD_SAURFANG));
+                        events.ScheduleEvent(EVENT_FAIL, 10000);
+                        break;
+                    case ACTION_MAGE_DIE:
+                        events.ScheduleEvent(EVENT_SPAWN_MAGE, 60000);
+                        break;
+                    case ACTION_ROCK_DIE:
+                        ++RocketerDieCount;
+                        if(RocketerDieCount == RocketerCount)
+                            events.ScheduleEvent(EVENT_RESPAWN_ROCKETEER, 60000);
+                        break;
+                    case ACTION_AXES_RIFL_DIE:
+                        ++RiflDieCount;
+                        if(RiflDieCount == RiflCount)
+                            events.ScheduleEvent(EVENT_RESPAWN_AXES_RIFLEMEN, 60000);
+                        break;
+                }
+            }
+
+            void DamageTaken(Unit* /*attacker*/, uint32& damage)
+            {
+                if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE && me->GetHealthPct() < 2.0f )
+                {
+                   damage = 0;
+                }
+                
+                if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE && me->GetHealthPct() < 2.0f )
+                {
+                   damage = 0;
+                   me->AI()->DoAction(ACTION_FAIL);
+                }
+            }
+
+            void MovementInform(uint32 type, uint32 pointId)
+            {
+                if (type != POINT_MOTION_TYPE)
+                    return;
+
+                if (pointId = 1)
+                    me->DespawnOrUnsummon(1000);
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+                
+                if (!HealthAbovePct(75))
+                {
+                    me->SetHealth(me->GetMaxHealth() / 100 * 76); // find a better way to avoid the hardcore spell spam ....
+                    DoCast(me, SPELL_TASTE_OF_BLOOD);
+                }
+
+                if (UpdateVictim())
+                {
+                    if (!EventScheduled)
+                    {
+                        EventScheduled = true; // should temp fix the hardcore casting
+                        events.ScheduleEvent(EVENT_RENDING_THROW, 3000);
+                    }
+                }
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_WIPE_CHECK:
+                            //DoCheckFallingPlayer(me);
+                            if (DoWipeCheck(skybreaker))
+                                events.ScheduleEvent(EVENT_WIPE_CHECK, 3000);
+                            else
+                                me->AI()->DoAction(ACTION_FAIL);
+                            break;
+                        case EVENT_INTRO_ALLIANCE_1:
+                            Talk(SAY_INTRO_ALLIANCE_0);
+                            break;
+                        case EVENT_START_FLY:
+                            StartFlyShip(skybreaker);
+                            break;
+                        case EVENT_INTRO_ALLIANCE_2:
+                            Talk(SAY_INTRO_ALLIANCE_1);
+                            break;
+                        case EVENT_INTRO_ALLIANCE_3:
+                            Talk(SAY_INTRO_ALLIANCE_2);
+                            StartFlyShip(CheckUnfriendlyShip(me, _instance, DATA_GB_HIGH_OVERLORD_SAURFANG));
+                            break;
+                        case EVENT_INTRO_ALLIANCE_4:
+                            Talk(SAY_INTRO_ALLIANCE_3);
+                            break;
+                        case EVENT_INTRO_ALLIANCE_5:
+                            StopFlyShip(skybreaker);
+                            StopFlyShip(CheckUnfriendlyShip(me, _instance, DATA_GB_HIGH_OVERLORD_SAURFANG));
+                            Talk(SAY_INTRO_ALLIANCE_4);
+                            break;
+                        case EVENT_INTRO_ALLIANCE_6:
+                            Talk(SAY_INTRO_ALLIANCE_5);
+                            SendMusicToPlayers(17289);
+                            me->AI()->DoAction(ACTION_BATTLE_EVENT);
+                            break;
+                        case EVENT_INTRO_ALLIANCE_7:
+                            if (Creature* pSaurfang = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_HIGH_OVERLORD_SAURFANG_NOT_VISUAL)))
+                            {
+                                pSaurfang->AI()->Talk(SAY_HIGH_OVERLORD_SAURFANG_NOT_VISUAL);
+                                pSaurfang->SetReactState(REACT_PASSIVE);
+                                pSaurfang->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                            }
+                            break;
+                        case EVENT_INTRO_ALLIANCE_8:
+                            Talk(SAY_INTRO_ALLIANCE_7);
+                            break;
+                        case EVENT_SUMMON_PORTAL:
+                            if(_instance->GetBossState(DATA_GUNSHIP_EVENT) == IN_PROGRESS)
+                            {
+                                events.ScheduleEvent(EVENT_BOARDING_TALK, 10000);
+                                events.ScheduleEvent(EVENT_BOARDING_GUNSHIP, 2500); // TODO: Fix the timers
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_PORTAL, -15.51547f, -0.160213f, 28.87252f, 1.56211f);
+                                CheckUnfriendlyShip(me, _instance, DATA_GB_HIGH_OVERLORD_SAURFANG)->AddNPCPassengerInInstance(NPC_GB_PORTAL, 47.55099f, -0.101778f, 37.61111f, 1.55138f);
+                            }
+                            break;
+                        case EVENT_RENDING_THROW:
+                            if (UpdateVictim())
+                                if (me->getVictim()->IsWithinDistInMap(me, 50.0f, false)) // Todo: Fix the distance
+                                {
+                                    DoCastVictim(SPELL_RENDING_THROW);
+                                    EventScheduled = false;
+                                }
+                                else
+                                    events.CancelEvent(EVENT_RENDING_THROW);
+                            break;
+                        case EVENT_TASTE_OF_BLOOD:
+                            DoCast(me, SPELL_TASTE_OF_BLOOD);
+                            break;
+                        case EVENT_BOARDING_TALK:
+                            Talk(SAY_BOARDING_SKYBREAKER_1);
+                            break;
+                        case EVENT_BOARDING_GUNSHIP:
+                            if (Creature* pSaurfang = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_HIGH_OVERLORD_SAURFANG_NOT_VISUAL)))
+                            {
+                                pSaurfang->AI()->Talk(SAY_BOARDING_SKYBREAKER_SAURFANG);
+                            }
+                            if(Creature* Sergante = skybreaker->AddNPCPassengerInInstance(NPC_GB_KORKRON_SERGANTE, -15.51547f, -0.160213f, 20.87252f, 1.56211f))
+                            {
+                                Sergante->CastSpell(Sergante, SPELL_TELEPORT_VISUAL, true);
+                            }
+                            events.ScheduleEvent(EVENT_SUMMON_PORTAL, 90000);
+                            events.ScheduleEvent(EVENT_BOARDING_REAVERS_MARINE, 3000);
+                            count = 0;
+                            break;
+                        case EVENT_BOARDING_REAVERS_MARINE:
+                            if(count <= SummonCount)
+                            {
+                                if(Creature* Reavers = skybreaker->AddNPCPassengerInInstance(NPC_GB_KORKRON_REAVERS, -15.51547f, -0.160213f, 20.87252f, 1.56211f))
+                                {
+                                    Reavers->CastSpell(Reavers, SPELL_TELEPORT_VISUAL, true);
+                                    events.ScheduleEvent(EVENT_BOARDING_REAVERS_MARINE, 21000 / SummonCount);
+                                    ++count;
+                                }
+                            }
+                            break;
+                        case EVENT_OUTRO_ALLIANCE_1:
+                            _instance->DoCompleteAchievement(RAID_MODE(IM_ON_A_BOAT_10,IM_ON_A_BOAT_25,IM_ON_A_BOAT_10,IM_ON_A_BOAT_25));
+                            _instance->DoCastSpellOnPlayers(SPELL_ACHIEVEMENT_CHECK);
+                            StartFlyShip(skybreaker);
+                            StopFlyShip(CheckUnfriendlyShip(me,_instance,DATA_GB_HIGH_OVERLORD_SAURFANG));
+                            break;
+                        case EVENT_OUTRO_ALLIANCE_2:
+                            StopFlyShip(skybreaker);
+                            me->SummonGameObject(RAID_MODE(GO_CAPITAN_CHEST_A_10N, GO_CAPITAN_CHEST_A_25N, GO_CAPITAN_CHEST_A_10H, GO_CAPITAN_CHEST_A_25H), -590.200022f, 2241.193115f, 538.588269f, 0, 0, 0, 0, 0, 100000);
+                            me->AddUnitMovementFlag(MOVEMENTFLAG_WALKING);
+                            me->GetMotionMaster()->MovePoint(0, -590.700f, 2213.01f, 539.1f);
+                            break;
+                        case EVENT_OUTRO_ALLIANCE_3:
+                            me->GetMotionMaster()->MovePoint(1, -555.59f, 2213.01f, 539.28f);
+                            break;
+                        case EVENT_FAIL:
+                            TeleportPlayers(map, ALLIANCE);
+                            events.ScheduleEvent(EVENT_RESTART_EVENT, 2000);
+                            _instance->SetBossState(DATA_GUNSHIP_EVENT, NOT_STARTED);
+                            break;
+                        case EVENT_RESTART_EVENT:
+                            _instance->SetBossState(DATA_GUNSHIP_EVENT, FAIL);
+                            RestartEvent(skybreaker, CheckUnfriendlyShip(me,_instance,DATA_GB_HIGH_OVERLORD_SAURFANG), map, ALLIANCE);
+                            break;
+                        case EVENT_SPAWN_MAGE:
+                            Talk(SAY_NEW_MAGE_SPAWNED);
+                            skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_SORCERERS, -17.8356f, 0.031688f, 20.823f, 4.73231f);
+                            break;
+                        case EVENT_RESPAWN_ROCKETEER:
+                            Talk(SAY_NEW_MORTAR_TEAM_SPAWNED);
+                            if(RocketerCount == 2)
+                            {
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -8.61003f, 15.483f, 20.4158f, 4.69854f);
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -27.9583f, 14.8875f, 20.4428f, 4.77865f);
+                            }
+                            if(RocketerCount == 4)
+                            {
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -8.61003f, 15.483f, 20.4158f, 4.69854f);
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -27.9583f, 14.8875f, 20.4428f, 4.77865f);
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -15.61003f, 15.483f, 20.4158f, 4.69854f);
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -20.9583f, 14.8875f, 20.4428f, 4.77865f);
+                            }
+                            break;
+                        case EVENT_RESPAWN_AXES_RIFLEMEN:
+                            Talk(SAY_NEW_RIFLEMEN_SPAWNED);
+                            if(RiflCount == 4)
+                            {
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -28.0876f, -22.9462f, 21.659f, 4.72416f);
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -21.7406f, -22.9462f, 21.659f, 4.72416f);
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -14.9806f, -22.9462f, 21.659f, 4.72416f);
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -5.15231f, -22.9462f, 21.659f, 4.72416f);
+                            }
+                            if(RiflCount == 6)
+                            {
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -33.0876f, -22.9462f, 21.659f, 4.72416f);
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -28.0876f, -22.9462f, 21.659f, 4.72416f);
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -21.7406f, -22.9462f, 21.659f, 4.72416f);
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -14.9806f, -22.9462f, 21.659f, 4.72416f);
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -5.15231f, -22.9462f, 21.659f, 4.72416f);
+                                skybreaker->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, 0.15231f, -22.9462f, 21.659f, 4.72416f);
+                            }
+                            break;
+                      }
+                }
+
+                if (!me->GetCurrentSpell(CURRENT_MELEE_SPELL))
+                    DoCastVictim(SPELL_CLEAVE);
+
+                DoMeleeAttackIfReady();
+            }
+
+            private:
+                Transport* skybreaker;
+                Map* map;
+                uint32 SummonCount;
+                EventMap events;
+                InstanceScript* _instance;
+                uint32 count;
+                uint32 RocketerDieCount;
+                uint32 RiflDieCount;
+                uint32 RocketerCount;
+                uint32 RiflCount;
+                bool EventScheduled;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_muradin_gunshipAI(pCreature);
+        }
+};
+
+class npc_gunship_skybreaker : public CreatureScript
+{
+    public:
+        npc_gunship_skybreaker() : CreatureScript("npc_gunship_skybreaker") { }
+
+        struct npc_gunship_skybreakerAI : public Scripted_NoMovementAI
+        {
+            npc_gunship_skybreakerAI(Creature *creature) : Scripted_NoMovementAI(creature), _instance(creature->GetInstanceScript())
+            {
+                Reset();
+            }
+
+            void Reset()
+            {
+                ScriptedAI::Reset();
+                me->SetReactState(REACT_PASSIVE);
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                me->SetDisplayId(11686);
+            }
+
+            void EnterCombat(Unit* /*who*/)
+            {
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                SetCombatMovement(false);
+                _instance->SendEncounterUnit(ENCOUNTER_FRAME_ADD, me);
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+            }
+
+            void JustDied(Unit* killer)
+            {
+                if (Transport* t = me->GetTransport())
+                    DoShipExplosion(t);
+
+                if(_instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+                {
+                    if (Creature* pMuradin = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_GB_MURADIN_BRONZEBEARD)))
+                        pMuradin->AI()->DoAction(ACTION_FAIL);
+                }
+                
+                else if(_instance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE)
+                {
+                    if (Creature* pSaurfang = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_GB_HIGH_OVERLORD_SAURFANG)))
+                        pSaurfang->AI()->DoAction(ACTION_DONE);
+                }
+            }
+
+            private:
+                EventMap events;
+                InstanceScript* _instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_gunship_skybreakerAI(pCreature);
+        }
+};
+
+class npc_gunship_orgrimmar : public CreatureScript
+{
+    public:
+        npc_gunship_orgrimmar() : CreatureScript("npc_gunship_orgrimmar") { }
+
+        struct npc_gunship_orgrimmarAI : public Scripted_NoMovementAI
+        {
+            npc_gunship_orgrimmarAI(Creature *creature) : Scripted_NoMovementAI(creature), _instance(creature->GetInstanceScript())
+            {
+                Reset();
+            }
+
+            void Reset()
+            {
+                ScriptedAI::Reset();
+                me->SetReactState(REACT_PASSIVE);
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                me->SetDisplayId(11686);
+            }
+
+            void EnterCombat(Unit* /*who*/)
+            {
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                SetCombatMovement(false);
+                _instance->SendEncounterUnit(ENCOUNTER_FRAME_ADD, me);
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+            }
+
+            void JustDied(Unit* killer)
+            {
+                if (Transport* t = me->GetTransport())
+                    DoShipExplosion(t);
+
+                if(_instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+                {
+                    if (Creature* pMuradin = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_GB_MURADIN_BRONZEBEARD)))
+                        pMuradin->AI()->DoAction(ACTION_DONE);
+                }
+                
+                else if(_instance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE)
+                {
+                    if (Creature* pSaurfang = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_GB_HIGH_OVERLORD_SAURFANG)))
+                        pSaurfang->AI()->DoAction(ACTION_FAIL);
+                }
+            }
+
+            private:
+                EventMap events;
+                InstanceScript* _instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_gunship_orgrimmarAI(pCreature);
+        }
+};
+
+/* Kro'kron Axethrower */
+class npc_korkron_axethrower_rifleman : public CreatureScript
+{
+    public:
+        npc_korkron_axethrower_rifleman() : CreatureScript("npc_korkron_axethrower_rifleman") { }
+
+        struct npc_korkron_axethrower_riflemanAI : public Scripted_NoMovementAI
+        {
+            npc_korkron_axethrower_riflemanAI(Creature *creature) : Scripted_NoMovementAI(creature),_instance(creature->GetInstanceScript())
+            {
+                Reset();
+            }
+
+            void Reset()
+            {
+                ScriptedAI::Reset();
+                DesperateResolve = RAID_MODE( SPELL_DESPERATE_RESOLVE_10_NM, SPELL_DESPERATE_RESOLVE_25_NM, SPELL_DESPERATE_RESOLVE_10_HM, SPELL_DESPERATE_RESOLVE_25_HM);
+                desperated = false;
+                me->RemoveAurasDueToSpell(SPELL_EXPERIENCED);
+                me->RemoveAurasDueToSpell(SPELL_ELITE);
+                me->RemoveAurasDueToSpell(SPELL_VETERAN);
+                events.ScheduleEvent(EVENT_EXPERIENCED, urand(19000, 21000)); // ~20 sec
+                events.ScheduleEvent(EVENT_VETERAN, urand(39000, 41000));     // ~40 sec
+                events.ScheduleEvent(EVENT_ELITE, urand(59000, 61000));       // ~60 sec
+                attacktimer = urand(6000, 15000);
+                if (me->GetEntry() == NPC_GB_SKYBREAKER_RIFLEMAN)
+                    SetEquipmentSlots(false, EQUIP_NO_CHANGE, EQUIP_NO_CHANGE, 47267);
+                else
+                    SetEquipmentSlots(false, 49691, EQUIP_NO_CHANGE, EQUIP_NO_CHANGE);
+            }
+
+            void DamageTaken(Unit* /*attacker*/, uint32& /*damage*/)
+            {
+                if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE && me->GetHealthPct() < 20.0f && !desperated)
+                {
+                    desperated = true;
+                    DoCast(me, DesperateResolve);
+                }
+            }
+
+            void JustDied(Unit* killer)
+            {
+                if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+                {
+                    if (Creature* pSaurfangBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_GB_HIGH_OVERLORD_SAURFANG)))
+                        pSaurfangBoss->AI()->DoAction(ACTION_AXES_RIFL_DIE);
+                }
+                
+                if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE)
+                {
+                    if (Creature* pMuradin = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_GB_MURADIN_BRONZEBEARD)))
+                        pMuradin->AI()->DoAction(ACTION_AXES_RIFL_DIE);
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (_instance->GetBossState(DATA_GUNSHIP_EVENT) != IN_PROGRESS)
+                    return;
+                
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+                    
+                me->AI()->AttackStart(SelectRandomPlayerInTheMaps(me->GetMap()));
+
+                if (!UpdateVictim())
+                    return;
+
+                events.Update(diff);
+
+                if (attacktimer <= diff)
+                {
+                    if(me->GetEntry() == NPC_GB_KORKRON_AXETHROWER)
+                        DoCast(me->getVictim(), SPELL_HURL_AXE);
+                    else if(me->GetEntry() == NPC_GB_SKYBREAKER_RIFLEMAN)
+                        DoCast(me->getVictim(), SPELL_SHOOT);
+                    attacktimer = urand(6000, 15000);
+                } else attacktimer -= diff;
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_EXPERIENCED:
+                            DoCast(me, SPELL_EXPERIENCED);
+                            break;
+                        case EVENT_VETERAN:
+                            me->RemoveAurasDueToSpell(SPELL_EXPERIENCED);
+                            DoCast(me, SPELL_VETERAN);
+                            break;
+                        case EVENT_ELITE:
+                            me->RemoveAurasDueToSpell(SPELL_VETERAN);
+                            DoCast(me, SPELL_ELITE);
+                            break;
+                        default:
+                            break;
+                    }
+                }
+            }
+
+            uint32 DesperateResolve;
+            uint32 attacktimer;
+
+            private:
+                EventMap events;
+                bool desperated;
+                InstanceScript* _instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_korkron_axethrower_riflemanAI(pCreature);
+        }
+};
+
+class npc_sergeant : public CreatureScript
+{
+    public:
+        npc_sergeant() : CreatureScript("npc_sergeant") { }
+
+        struct npc_sergeantAI : public ScriptedAI
+        {
+            npc_sergeantAI(Creature *creature) : ScriptedAI(creature),_instance(creature->GetInstanceScript())
+            {
+                Reset();
+            }
+
+            void Reset()
+            {
+                ScriptedAI::Reset();
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                me->SetReactState(REACT_PASSIVE);
+                events.ScheduleEvent(EVENT_WALK_MOBS, 1500);
+                desperated = false;
+                me->RemoveAurasDueToSpell(SPELL_EXPERIENCED);
+                me->RemoveAurasDueToSpell(SPELL_ELITE);
+                DesperateResolve = RAID_MODE( SPELL_DESPERATE_RESOLVE_10_NM, SPELL_DESPERATE_RESOLVE_25_NM, SPELL_DESPERATE_RESOLVE_10_HM, SPELL_DESPERATE_RESOLVE_25_HM);
+                events.ScheduleEvent(EVENT_EXPERIENCED, urand(19000, 21000));  // ~20 sec
+                events.ScheduleEvent(EVENT_VETERAN, urand(39000, 41000));      // ~40 sec
+                events.ScheduleEvent(EVENT_BURNING_PITCH, urand(60000, 62000));// ~61 sec
+                if(me->GetMap()->ToInstanceMap()->GetMaxPlayers() == 25 && me->GetMap()->IsHeroic())
+                    events.ScheduleEvent(EVENT_ELITE, urand(59000, 61000));       // ~60 sec
+            }
+
+            void DamageTaken(Unit* /*attacker*/, uint32& /*damage*/)
+            {
+                if (me->GetHealthPct() < 20.0f && !desperated)
+                {
+                    desperated = true;
+                    DoCast(me, DesperateResolve);
+                }
+            }
+
+            bool CanAIAttack(Unit const* target) const
+            {
+                if (target->GetEntry() == NPC_GB_GUNSHIP_HULL)
+                    return false;
+
+                return true;
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if(_instance->GetBossState(DATA_GUNSHIP_EVENT) != IN_PROGRESS)
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+                    
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_WALK_MOBS:
+                            me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                            me->SetReactState(REACT_AGGRESSIVE);
+                            switch (me->GetEntry())
+                            {
+                                case NPC_GB_KORKRON_SERGANTE:
+                                    if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 0.0f, true, SPELL_ON_SKYBREAKERS_DECK))
+                                    {
+                                        me->GetMotionMaster()->MoveChase(target);
+                                        me->AI()->AttackStart(target);
+                                    }
+                                break;
+                                case NPC_GB_SKYBREAKER_SERGANTE:
+                                    if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 0.0f, true, SPELL_ON_ORGRIMS_HAMMERS_DECK))
+                                    {
+                                        me->GetMotionMaster()->MoveChase(target);
+                                        me->AI()->AttackStart(target);
+                                    }
+                                break;
+                            }
+                            events.ScheduleEvent(EVENT_WOUNDING_STRIKE, 5000);
+                            events.ScheduleEvent(EVENT_BLADE_STORM, 3000);
+                            break;
+                        case EVENT_BURNING_PITCH:
+                            if (Unit* pTarget = SelectTarget(SELECT_TARGET_RANDOM, 0, 100.0f, true))
+                            {
+                                if (me->GetEntry() == NPC_GB_KORKRON_SERGANTE)
+                                    DoCast(pTarget, SPELL_BURNING_PITCH_H);
+                                else
+                                    DoCast(pTarget, SPELL_BURNING_PITCH_A);
+                            }
+                            events.ScheduleEvent(EVENT_BURNING_PITCH, urand(60000, 62000));// ~61 sec
+                            break;
+                        case EVENT_EXPERIENCED:
+                            DoCast(me, SPELL_EXPERIENCED);
+                            break;
+                        case EVENT_VETERAN:
+                            me->RemoveAurasDueToSpell(SPELL_EXPERIENCED);
+                            DoCast(me, SPELL_VETERAN);
+                            break;
+                        case EVENT_ELITE:
+                            me->RemoveAurasDueToSpell(SPELL_VETERAN);
+                            DoCast(me, SPELL_ELITE);
+                            break;
+                        case EVENT_WOUNDING_STRIKE:
+                            if (UpdateVictim())
+                                DoCastVictim( RAID_MODE( SPELL_WOUNDING_STRIKE_10_NM, SPELL_WOUNDING_STRIKE_25_NM, SPELL_WOUNDING_STRIKE_10_HM, SPELL_WOUNDING_STRIKE_25_HM));
+                            events.ScheduleEvent(EVENT_WOUNDING_STRIKE, urand(5000, 8000));
+                            break;
+                        case EVENT_BLADE_STORM:
+                            DoCast(me, SPELL_BLADESTORM);
+                            events.ScheduleEvent(EVENT_BLADE_STORM, urand(9000, 16000));
+                            break;
+                    }
+                }
+
+                DoMeleeAttackIfReady();
+
+            }
+                uint32 DesperateResolve;
+                bool desperated;
+
+            private:
+                EventMap events;
+                InstanceScript* _instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_sergeantAI(pCreature);
+        }
+};
+
+class npc_marine_or_reaver : public CreatureScript
+{
+    public:
+        npc_marine_or_reaver() : CreatureScript("npc_marine_or_reaver") { }
+
+        struct npc_marine_or_reaverAI : public ScriptedAI
+        {
+            npc_marine_or_reaverAI(Creature *creature) : ScriptedAI(creature), _instance(creature->GetInstanceScript())
+            {
+                Reset();
+            }
+
+            void Reset()
+            {
+                ScriptedAI::Reset();
+                desperated = false;
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                me->SetReactState(REACT_PASSIVE);
+                events.ScheduleEvent(EVENT_WALK_MOBS, 1500);
+                me->RemoveAurasDueToSpell(SPELL_EXPERIENCED);
+                me->RemoveAurasDueToSpell(SPELL_ELITE);
+                DesperateResolve = RAID_MODE( SPELL_DESPERATE_RESOLVE_10_NM, SPELL_DESPERATE_RESOLVE_25_NM, SPELL_DESPERATE_RESOLVE_10_HM, SPELL_DESPERATE_RESOLVE_25_HM);
+                events.ScheduleEvent(EVENT_EXPERIENCED, urand(19000, 21000));  // ~20 sec
+                events.ScheduleEvent(EVENT_VETERAN, urand(39000, 41000));      // ~40 sec
+                events.ScheduleEvent(EVENT_BURNING_PITCH, urand(60000, 62000));// ~61 sec
+            }
+
+            void DamageTaken(Unit* /*attacker*/, uint32& /*damage*/)
+            {
+                if (me->GetHealthPct() < 20.0f && !desperated)
+                {
+                    desperated = true;
+                    DoCast(me, DesperateResolve);
+                }
+            }
+
+            bool CanAIAttack(Unit const* target) const
+            {
+                if (target->GetEntry() == NPC_GB_GUNSHIP_HULL)
+                    return false;
+
+                return true;
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if(_instance->GetBossState(DATA_GUNSHIP_EVENT) != IN_PROGRESS)
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_WALK_MOBS:
+                            me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                            me->SetReactState(REACT_AGGRESSIVE);
+                            switch (me->GetEntry())
+                            {
+                                case NPC_GB_KORKRON_REAVERS:
+                                    if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 0.0f, true, SPELL_ON_SKYBREAKERS_DECK))
+                                    {
+                                        me->GetMotionMaster()->MoveChase(target);
+                                        me->AI()->AttackStart(target);
+                                    }
+                                break;
+                                case NPC_GB_SKYBREAKER_MARINE:
+                                    if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 0.0f, true, SPELL_ON_ORGRIMS_HAMMERS_DECK))
+                                    {
+                                        me->GetMotionMaster()->MoveChase(target);
+                                        me->AI()->AttackStart(target);
+                                    }
+                                break;
+                            }
+                            break;
+                        case EVENT_BURNING_PITCH:
+                            if (Unit* pTarget = SelectTarget(SELECT_TARGET_RANDOM, 0, 100, true))
+                            {
+                                if (me->GetEntry() == NPC_GB_KORKRON_REAVERS)
+                                    DoCast(pTarget, SPELL_BURNING_PITCH_H);
+                                else
+                                    DoCast(pTarget, SPELL_BURNING_PITCH_A);
+                            }
+                            events.ScheduleEvent(EVENT_BURNING_PITCH, urand(60000, 62000));// ~61 sec
+                            break;
+                        case EVENT_EXPERIENCED:
+                            DoCast(me, SPELL_EXPERIENCED);
+                            break;
+                        case EVENT_VETERAN:
+                            me->RemoveAurasDueToSpell(SPELL_EXPERIENCED);
+                            DoCast(me, SPELL_VETERAN);
+                            break;
+                    }
+                }
+
+                DoMeleeAttackIfReady();
+            }
+                uint32 DesperateResolve;
+                bool desperated;
+
+            private:
+                EventMap events;
+                InstanceScript* _instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_marine_or_reaverAI(pCreature);
+        }
+};
+
+class npc_gunship_mage : public CreatureScript
+{
+    public:
+        npc_gunship_mage() : CreatureScript("npc_gunship_mage") { }
+
+        struct npc_gunship_mageAI : public Scripted_NoMovementAI
+        {
+            npc_gunship_mageAI(Creature *creature) : Scripted_NoMovementAI(creature),_instance(creature->GetInstanceScript())
+            {
+                Reset();
+            }
+
+            void Reset()
+            {
+                ScriptedAI::Reset();
+                timer_BelowZero = urand(10000, 15000);
+            }
+
+            void DoAction(int32 const action)
+            {
+                switch (action)
+                {
+                    case EVENT_FREEZE_CANNON:
+                        if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+                        {
+                            std::list<Creature*> cannonsA;
+                            GetCreatureListWithEntryInGrid(cannonsA, me, NPC_GB_ALLIANCE_CANON, 500.0f);
+                            for (std::list<Creature*>::iterator itr = cannonsA.begin(); itr != cannonsA.end(); ++itr)
+                            {
+                                if (Vehicle* veh = (*itr)->GetVehicleKit())
+                                    veh->RemoveAllPassengers();
+                                                                      
+                                DoCast((*itr),SPELL_BELOW_ZERO,true);
+                            }
+                        }
+                        else if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE)
+                        {
+                            std::list<Creature*> cannonsH;
+                            GetCreatureListWithEntryInGrid(cannonsH, me, NPC_GB_HORDE_CANON, 500.0f);
+                            for (std::list<Creature*>::iterator itr = cannonsH.begin(); itr != cannonsH.end(); ++itr)
+                            {
+                                if (Vehicle* veh = (*itr)->GetVehicleKit())
+                                    veh->RemoveAllPassengers();
+                                                                      
+                                 DoCast((*itr),SPELL_BELOW_ZERO,true);
+                            }
+                        }
+                    break;
+                }
+            }
+
+            void JustDied(Unit* killer)
+            {
+                if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+                {
+                    if (me->GetGUID() == _instance->GetData64(DATA_GB_BATTLE_MAGE))
+                    {
+                        if (Creature* pSaurfangBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_GB_HIGH_OVERLORD_SAURFANG)))
+                            pSaurfangBoss->AI()->DoAction(ACTION_MAGE_DIE);
+                    }
+                 }
+                
+                 if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE)
+                 {
+                     if (me->GetGUID() == _instance->GetData64(DATA_GB_BATTLE_MAGE))
+                     {
+                         if (Creature* pMuradin = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_GB_MURADIN_BRONZEBEARD)))
+                             pMuradin->AI()->DoAction(ACTION_MAGE_DIE);
+                     }
+                 }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if(_instance->GetBossState(DATA_GUNSHIP_EVENT) != IN_PROGRESS)
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+                    
+                if (me->GetGUID() == _instance->GetData64(DATA_GB_BATTLE_MAGE))
+                {
+                    if( timer_BelowZero <= diff)
+                    {
+                        me->AI()->DoAction(EVENT_FREEZE_CANNON);
+                        timer_BelowZero = urand(10000, 15000);
+                    } else timer_BelowZero -= diff;
+                }
+                else
+                {
+                    DoCast(me,SPELL_SHADOW_CHANNELING);
+                }
+            }
+                uint32 timer_BelowZero;
+            private:
+                EventMap events;
+                InstanceScript* _instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_gunship_mageAI(pCreature);
+        }
+};
+
+/* Gunship Cannon (Horde / Ally) */
+class npc_gunship_cannon : public CreatureScript
+{
+    public:
+        npc_gunship_cannon() : CreatureScript("npc_gunship_cannon") { }
+
+        struct npc_gunship_cannonAI : public ScriptedAI
+        {
+            npc_gunship_cannonAI(Creature *creature) : ScriptedAI(creature) { }
+
+            void Reset()
+            {
+                me->SetReactState(REACT_PASSIVE);
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                DoCast(me, SPELL_HEAT_DRAIN, true);
+            }
+
+            void SpellHit(Unit* /*caster*/, SpellInfo const* spellEntry)
+            {
+                if (spellEntry->Id == SPELL_BELOW_ZERO)
+                    me->GetVehicleKit()->RemoveAllPassengers();
+            }
+
+            void DamageTaken(Unit* attacker, uint32& damage)
+            {
+                if(me->GetEntry() == NPC_GB_ALLIANCE_CANON)
+                {
+                    if (Creature* pAllianceBoss = ObjectAccessor::GetCreature(*me, me->GetInstanceScript()->GetData64(DATA_SKYBREAKER_BOSS)))
+                        attacker->DealDamage(pAllianceBoss, damage);
+                }
+
+                if(me->GetEntry() == NPC_GB_HORDE_CANON)
+                {
+                    if (Creature* pHordeBoss = ObjectAccessor::GetCreature(*me, me->GetInstanceScript()->GetData64(DATA_ORGRIMMAR_HAMMER_BOSS)))
+                        attacker->DealDamage(pHordeBoss, damage);
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if(me->HasAura(SPELL_BELOW_ZERO))
+                {
+                    me->RemoveAurasByType(SPELL_AURA_CONTROL_VEHICLE);
+                    me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+                                      
+                    if (Vehicle* veh = me->GetVehicleKit())
+                        veh->RemoveAllPassengers();
+                }
+                else
+                {
+                    me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+                }
+            }
+
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_gunship_cannonAI(pCreature);
+        }
+};
+
+class npc_mortar_soldier_or_rocketeer : public CreatureScript
+{
+    public:
+        npc_mortar_soldier_or_rocketeer() : CreatureScript("npc_mortar_soldier_or_rocketeer") { }
+
+        struct npc_mortar_soldier_or_rocketeerAI : public Scripted_NoMovementAI
+        {
+            npc_mortar_soldier_or_rocketeerAI(Creature *creature) : Scripted_NoMovementAI(creature),_instance(creature->GetInstanceScript())
+            {
+                Reset();
+            }
+
+            void Reset()
+            {
+                ScriptedAI::Reset();
+                me->RemoveAurasDueToSpell(SPELL_EXPERIENCED);
+                me->RemoveAurasDueToSpell(SPELL_ELITE);
+                me->RemoveAurasDueToSpell(SPELL_VETERAN);
+                events.ScheduleEvent(EVENT_EXPERIENCED, urand(19000, 21000)); // ~20 sec
+                events.ScheduleEvent(EVENT_VETERAN, urand(39000, 41000));     // ~40 sec
+                events.ScheduleEvent(EVENT_ELITE, urand(59000, 61000));       // ~60 sec
+                events.ScheduleEvent(EVENT_ROCKET_ART, urand(10000, 15000));   // ~12 sec
+            }
+
+            void JustDied(Unit* killer)
+            {
+                if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+                {
+                    if (Creature* pSaurfangBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_GB_HIGH_OVERLORD_SAURFANG)))
+                        pSaurfangBoss->AI()->DoAction(ACTION_ROCK_DIE);
+                }
+                if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE)
+                {
+                    if (Creature* pMuradin = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_GB_MURADIN_BRONZEBEARD)))
+                        pMuradin->AI()->DoAction(ACTION_ROCK_DIE);
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if(_instance->GetBossState(DATA_GUNSHIP_EVENT) != IN_PROGRESS)
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+                    
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_EXPERIENCED:
+                            DoCast(me, SPELL_EXPERIENCED);
+                            break;
+                        case EVENT_VETERAN:
+                            me->RemoveAurasDueToSpell(SPELL_EXPERIENCED);
+                            DoCast(me, SPELL_VETERAN);
+                            break;
+                        case EVENT_ELITE:
+                            me->RemoveAurasDueToSpell(SPELL_VETERAN);
+                            DoCast(me, SPELL_ELITE);
+                            break;
+                        case EVENT_ROCKET_ART:
+                            if(Player* target = SelectRandomPlayerInTheMaps(me->GetMap()))
+                            {
+                                if(me->GetEntry() == NPC_GB_KORKRON_ROCKETEER && target->HasAura(SPELL_ON_SKYBREAKERS_DECK))
+                                {
+                                    me->CastSpell(target->GetPositionX(), target->GetPositionY(), target->GetPositionZ(), SPELL_ROCKET_ARTILLERY_TRIGGERED, true);
+                                    me->CastSpell(target, 69400, true);
+                                }
+                                else if(me->GetEntry() == NPC_GB_SKYBREAKER_MORTAR_SOLDIER && target->HasAura(SPELL_ON_ORGRIMS_HAMMERS_DECK))
+                                {
+                                    me->CastSpell(target->GetPositionX(), target->GetPositionY(), target->GetPositionZ(), SPELL_ROCKET_ARTILLERY_TRIGGERED, true);
+                                    me->CastSpell(target, 70173, true);
+                                }
+                            }
+                            events.ScheduleEvent(EVENT_ROCKET_ART, urand(10000, 15000));   // ~12 sec
+                            break;
+                        default:
+                            break;
+                    }
+                }
+            }
+
+            private:
+                EventMap events;
+                InstanceScript* _instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_mortar_soldier_or_rocketeerAI(pCreature);
+        }
+};
+
+class npc_zafod_boombox : public CreatureScript
+{
+    public:
+        npc_zafod_boombox() : CreatureScript("npc_zafod_boombox") { }
+
+        bool OnGossipHello(Player* pPlayer, Creature* pCreature)
+        {
+            // Maybe this isn't blizzlike but I can't find any spell in the DBCs
+            if (pPlayer->GetItemCount(49278, false) == 0)
+                pPlayer->ADD_GOSSIP_ITEM(0, "Yeah, I'm sure safety is your top priority. Give me a rocket pack.", 631, 1);
+            pPlayer->SEND_GOSSIP_MENU(pPlayer->GetGossipTextId(pCreature), pCreature->GetGUID());
+            return true;
+        }
+
+        bool OnGossipSelect(Player* player, Creature* pCreature, uint32 /*sender*/, uint32 action)
+        {
+            player->PlayerTalkClass->ClearMenus();
+            player->CLOSE_GOSSIP_MENU();
+            if (action == 1)
+            {
+                // Seurity, this shouldn't happen. Maybe useless.
+                uint32 curItemCount = player->GetItemCount(49278, false);
+                if (curItemCount >= 1)
+                {
+                    pCreature->MonsterWhisper("You already have my rocket pack!", player->GetGUIDLow());
+                    return false;
+                }
+
+                ItemPosCountVec dest;
+                uint8 msg = player->CanStoreNewItem(NULL_BAG, NULL_SLOT, dest, 49278, 1);
+                if (msg == EQUIP_ERR_OK)
+                {
+                    Item* item = player->StoreNewItem(dest, 49278, true);
+                    player->SendNewItem(item, 1, true, false);
+                }
+                else
+                {
+                    pCreature->MonsterWhisper("You don't have any empty space for my rocket pack!", player->GetGUIDLow());
+                    return false;
+                }
+            }
+
+            return true;
+        }
+};
+
+// Gunship: Aqui va saurfang el del barco
+class npc_saurfang_gunship : public CreatureScript
+{
+    public:
+        npc_saurfang_gunship() : CreatureScript("npc_saurfang_gunship") { }
+
+        bool OnGossipHello(Player* player, Creature* pCreature)
+        {
+            InstanceScript* pInstance = pCreature->GetInstanceScript();
+            if (pInstance && pInstance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE)
+            {
+                if ((!player->GetGroup() || !player->GetGroup()->IsLeader(player->GetGUID())) && !player->isGameMaster())
+                {
+                    player->ADD_GOSSIP_ITEM(GOSSIP_ICON_CHAT, "I'm not the raid leader...", GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF+2);
+                    player->SEND_GOSSIP_MENU(DEFAULT_GOSSIP_MESSAGE, pCreature->GetGUID());
+                    return true;
+                }
+
+                player->ADD_GOSSIP_ITEM(0, "My companions are all accounted for, Saurfang. Let's go!", 631, 1001);
+                player->SEND_GOSSIP_MENU(player->GetGossipTextId(pCreature), pCreature->GetGUID());
+                return true;
+            }
+            return false;
+        }
+
+        bool OnGossipSelect(Player* player, Creature* pCreature, uint32 /*sender*/, uint32 action)
+        {
+            InstanceScript* instance = pCreature->GetInstanceScript();
+            player->PlayerTalkClass->ClearMenus();
+            player->CLOSE_GOSSIP_MENU();
+
+            if (action == GOSSIP_ACTION_INFO_DEF+2)
+                pCreature->MonsterSay("I'll wait for the raid leader.", LANG_UNIVERSAL, player->GetGUID());
+
+            if (action == 1001)
+            {
+                pCreature->AI()->DoAction(ACTION_INTRO_START);
+                pCreature->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            }
+            return true;
+        }
+        struct npc_saurfang_gunshipAI : public ScriptedAI
+        {
+            npc_saurfang_gunshipAI(Creature *creature) : ScriptedAI(creature),
+                _instance(creature->GetInstanceScript())
+            {
+            }
+
+            void Reset()
+            {
+                if (_instance->GetBossState(DATA_GUNSHIP_EVENT) == IN_PROGRESS)
+                    return;
+                me->SetReactState(REACT_PASSIVE);
+                me->setFaction(1801);
+                events.Reset();
+                map = me->GetMap();
+                orgrimmar = me->GetTransport();
+                RocketerDieCount = 0;
+                AxesDieCount = 0;
+                SummonCount = RAID_MODE(3, 5, 4, 6);
+                count = 0;
+                RocketerCount = RAID_MODE(2, 4, 2, 4);
+                AxesCount = RAID_MODE(4, 6, 4, 6);
+                EventScheduled = false;
+            }
+
+            void SendMusicToPlayers(uint32 musicId) const
+            {
+                WorldPacket data(SMSG_PLAY_MUSIC, 4);
+                data << uint32(musicId);
+                SendPacketToPlayers(&data);
+            }
+
+            // Send packet to all players
+            void SendPacketToPlayers(WorldPacket const* data) const
+            {
+                Map::PlayerList const& players = me->GetMap()->GetPlayers();
+                if (!players.isEmpty())
+                    for (Map::PlayerList::const_iterator itr = players.begin(); itr != players.end(); ++itr)
+                        if (Player* player = itr->getSource())
+                            player->GetSession()->SendPacket(data);
+            }
+
+            bool CanAIAttack(Unit const* target) const
+            {
+                if (target->GetEntry() == NPC_GB_SKYBREAKER_SERGANTE || target->GetEntry() == NPC_GB_SKYBREAKER_MARINE || target->GetTypeId() == TYPEID_PLAYER)
+                    return true;
+
+                return false;
+            }
+
+            void DoAction(int32 const action)
+            {
+                switch (action)
+                {
+                     case ACTION_INTRO_START:
+                         events.ScheduleEvent(EVENT_INTRO_HORDE_1, 1000);
+                         events.ScheduleEvent(EVENT_INTRO_HORDE_1_1, 11000);
+                         events.ScheduleEvent(EVENT_START_FLY, 5000);
+                         events.ScheduleEvent(EVENT_INTRO_HORDE_2, 32000);
+                         events.ScheduleEvent(EVENT_INTRO_HORDE_3, 51000);
+                         events.ScheduleEvent(EVENT_INTRO_HORDE_4, 57000);
+                         events.ScheduleEvent(EVENT_INTRO_HORDE_5, 62000);
+                         break;
+                     case ACTION_BATTLE_EVENT:
+                     {
+                         if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE)
+                             events.ScheduleEvent(EVENT_WIPE_CHECK, 5000);
+
+                         Creature* pHordeBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_ORGRIMMAR_HAMMER_BOSS));
+                         Creature* pAllianceBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_SKYBREAKER_BOSS));
+
+                         if (pHordeBoss && pAllianceBoss)
+                         {
+                             me->SetReactState(REACT_AGGRESSIVE);
+                             pHordeBoss->SetInCombatWith(pAllianceBoss);
+                             pAllianceBoss->SetInCombatWith(pHordeBoss);
+                             pAllianceBoss->AddThreat(pHordeBoss, 0.0f);
+                             pHordeBoss->AddThreat(pAllianceBoss, 0.0f);
+                             _instance->SetBossState(DATA_GUNSHIP_EVENT, IN_PROGRESS);
+                             events.ScheduleEvent(EVENT_SUMMON_PORTAL, 30000);
+                             RelocateTransport(orgrimmar);
+                             RelocateTransport(CheckUnfriendlyShip(me,_instance, DATA_GB_MURADIN_BRONZEBEARD));
+                         }
+                         else
+                             me->AI()->DoAction(ACTION_FAIL);
+                         break;
+                     }
+                     case ACTION_DONE:
+                         if (Creature* pAllianceBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_SKYBREAKER_BOSS)))
+                         {
+                             _instance->SendEncounterUnit(ENCOUNTER_FRAME_REMOVE, pAllianceBoss);
+                         }
+                         if (Creature* pHordeBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_ORGRIMMAR_HAMMER_BOSS)))
+                         {
+                             _instance->SendEncounterUnit(ENCOUNTER_FRAME_REMOVE, pHordeBoss);
+                         }
+
+                         me->SetReactState(REACT_PASSIVE);
+                         _instance->SetBossState(DATA_GUNSHIP_EVENT, DONE);
+                         _instance->DoCastSpellOnPlayers(SPELL_REMOVE_ROCKET_PACK);
+                         Talk(SAY_HORDE_VICTORY);
+                         StartFlyShip(CheckUnfriendlyShip(me, _instance, DATA_GB_MURADIN_BRONZEBEARD));
+                         StopFight(orgrimmar,CheckUnfriendlyShip(me,_instance, DATA_GB_MURADIN_BRONZEBEARD));
+                         events.CancelEvent(EVENT_WIPE_CHECK);
+                         events.ScheduleEvent(EVENT_OUTRO_HORDE_1, 3500);
+                         events.ScheduleEvent(EVENT_OUTRO_HORDE_2, 21000);
+                         events.ScheduleEvent(EVENT_OUTRO_HORDE_3, 32000);
+                         break;
+                     case ACTION_FAIL:
+                         events.CancelEvent(EVENT_WIPE_CHECK);
+                         Talk(SAY_HORDE_DEFEAT);
+                         if (Creature* pHordeBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_ORGRIMMAR_HAMMER_BOSS)))
+                         {
+                             _instance->SendEncounterUnit(ENCOUNTER_FRAME_REMOVE, pHordeBoss);
+                         }
+                         if (Creature* pAllianceBoss = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_SKYBREAKER_BOSS)))
+                         {
+                             _instance->SendEncounterUnit(ENCOUNTER_FRAME_REMOVE, pAllianceBoss);
+                         }
+                         StopFight(orgrimmar,CheckUnfriendlyShip(me,_instance, DATA_GB_MURADIN_BRONZEBEARD));
+                         events.ScheduleEvent(EVENT_FAIL, 10000);
+                         break;
+                     case ACTION_MAGE_DIE:
+                         events.ScheduleEvent(EVENT_SPAWN_MAGE, 60000);
+                         break;
+                     case ACTION_ROCK_DIE:
+                         ++RocketerDieCount;
+                         if(RocketerDieCount == RocketerCount)
+                             events.ScheduleEvent(EVENT_RESPAWN_ROCKETEER, 60000);
+                         break;
+                     case ACTION_AXES_RIFL_DIE:
+                         ++AxesDieCount;
+                         if(AxesDieCount == AxesCount)
+                             events.ScheduleEvent(EVENT_RESPAWN_AXES_RIFLEMEN, 60000);
+                         break;
+                 }
+            }
+
+            void DamageTaken(Unit* /*attacker*/, uint32& damage)
+            {
+                if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE && me->GetHealthPct() < 2.0f )
+                {
+                    damage = 0;
+                }
+                
+                if (_instance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE && me->GetHealthPct() < 2.0f )
+                {
+                    damage = 0;
+                    me->AI()->DoAction(ACTION_FAIL);
+                }
+            }
+
+            void MovementInform(uint32 type, uint32 pointId)
+            {
+                if (type != POINT_MOTION_TYPE)
+                    return;
+
+                if (pointId = 1)
+                    me->DespawnOrUnsummon(1000);
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+                    
+                if(_instance->GetBossState(DATA_GUNSHIP_EVENT) == IN_PROGRESS)
+                {
+                    if (!HealthAbovePct(75))
+                    {
+                        me->SetHealth(me->GetMaxHealth() / 100 * 76); // find a better way to avoid the hardcore spell spam ....
+                        DoCast(me, SPELL_TASTE_OF_BLOOD);
+                    }
+
+                    if (UpdateVictim())
+                    {
+                        if (!EventScheduled)
+                        {
+                            events.ScheduleEvent(EVENT_RENDING_THROW, 1500);
+                            EventScheduled = true;
+                        }
+                    }
+                }
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_WIPE_CHECK:
+                            DoCheckFallingPlayer(me);
+                            if (DoWipeCheck(orgrimmar))
+                                events.ScheduleEvent(EVENT_WIPE_CHECK, 3000);
+                            else
+                                me->AI()->DoAction(ACTION_FAIL);
+                            break;
+                        case EVENT_INTRO_HORDE_1:
+                            Talk(SAY_INTRO_HORDE_0);
+                            StartFlyShip(orgrimmar);
+                            break;
+                        case EVENT_INTRO_HORDE_1_1:
+                            Talk(SAY_INTRO_HORDE_0_1);
+                            break;
+                        case EVENT_START_FLY:
+                            break;
+                        case EVENT_INTRO_HORDE_2:
+                            StopFlyShip(orgrimmar);
+                            StartFlyShip(CheckUnfriendlyShip(me, _instance, DATA_GB_MURADIN_BRONZEBEARD));
+                            Talk(SAY_INTRO_HORDE_1);
+                            break;
+                        case EVENT_INTRO_HORDE_3:
+                            StopFlyShip(CheckUnfriendlyShip(me, _instance, DATA_GB_MURADIN_BRONZEBEARD));
+                            Talk(SAY_INTRO_HORDE_2);
+                            break;
+                        case EVENT_INTRO_HORDE_4:
+                            SendMusicToPlayers(17289);
+                            me->AI()->DoAction(ACTION_BATTLE_EVENT);
+                            if (Creature* pMuradin = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_MURADIN_BRONZEBEARD_NOT_VISUAL)))
+                            {
+                                pMuradin->AI()->Talk(SAY_MURADIN_BRONZEBEARD_NOT_VISUAL);
+                                pMuradin->SetReactState(REACT_PASSIVE);
+                                pMuradin->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                            }
+                            break;
+                        case EVENT_INTRO_HORDE_5:
+                            Talk(SAY_INTRO_HORDE_4);
+                            break;
+                        case EVENT_SUMMON_PORTAL:
+                            orgrimmar->AddNPCPassengerInInstance(NPC_GB_PORTAL, 15.03016f, -7.00016f, 37.70952f, 1.55138f);
+                            CheckUnfriendlyShip(me, _instance, DATA_MURADIN_BRONZEBEARD_NOT_VISUAL)->AddNPCPassengerInInstance(NPC_GB_PORTAL, 3.51547f, -0.160213f, 20.87252f, 3.05033f);
+                            events.ScheduleEvent(EVENT_BOARDING_TALK, 10000);
+                            events.ScheduleEvent(EVENT_BOARDING_GUNSHIP, 2500); // TODO: Fix the timers
+                            break;
+                        case EVENT_BOARDING_TALK:
+                            Talk(SAY_BOARDING_ORGRIMS_HAMMER_1);
+                            break;
+                        case EVENT_BOARDING_GUNSHIP:
+                             count = 0;
+                             if (Creature* pSaurfang = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_MURADIN_BRONZEBEARD_NOT_VISUAL)))
+                             {
+                                 pSaurfang->AI()->Talk(SAY_BOARDING_SKYBREAKER_MURADIN);
+                             }
+                             if (Creature* Sergante = orgrimmar->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_SERGANTE, 15.03016f, -7.00016f, 37.70952f, 1.55138f))
+                             {
+                                 Sergante->CastSpell(Sergante, SPELL_TELEPORT_VISUAL, true);
+                             }
+                             events.ScheduleEvent(EVENT_BOARDING_REAVERS_MARINE, 3000);
+                             events.ScheduleEvent(EVENT_SUMMON_PORTAL, 90000);
+                            break;
+                        case EVENT_BOARDING_REAVERS_MARINE:
+                            if(count <= SummonCount)
+                            {
+                                if(Creature* Marine = orgrimmar->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MARINE, 15.03016f, -7.00016f, 37.70952f, 1.55138f))
+                                {
+                                    Marine->CastSpell(Marine, SPELL_TELEPORT_VISUAL, true);
+                                    count++;
+                                    events.ScheduleEvent(EVENT_BOARDING_REAVERS_MARINE, 2500);
+                                }
+                            }
+                            break;
+                        case EVENT_OUTRO_HORDE_1:
+                            _instance->DoCompleteAchievement(RAID_MODE(IM_ON_A_BOAT_10,IM_ON_A_BOAT_25,IM_ON_A_BOAT_10,IM_ON_A_BOAT_25));
+                            _instance->DoCastSpellOnPlayers(SPELL_ACHIEVEMENT_CHECK);
+                            StartFlyShip(orgrimmar);
+                            StopFlyShip(CheckUnfriendlyShip(me,_instance,DATA_GB_MURADIN_BRONZEBEARD));
+                            break;
+                        case EVENT_OUTRO_HORDE_2:
+                            StopFlyShip(orgrimmar);
+                            me->SummonGameObject(RAID_MODE(GO_CAPITAN_CHEST_H_10N, GO_CAPITAN_CHEST_H_25N, GO_CAPITAN_CHEST_H_10H, GO_CAPITAN_CHEST_H_25H), -590.200022f, 2241.193115f, 539.588269f, 0, 0, 0, 0, 0, 100000);
+                            me->AddUnitMovementFlag(MOVEMENTFLAG_WALKING);
+                            me->GetMotionMaster()->MovePoint(0, -590.700f, 2213.01f, 539.1f);
+                            break;
+                        case EVENT_OUTRO_HORDE_3:
+                            me->GetMotionMaster()->MovePoint(1, -555.59f, 2213.01f, 539.28f);
+                            break;
+                        case EVENT_FAIL:
+                            TeleportPlayers(map, HORDE);
+                            events.ScheduleEvent(EVENT_RESTART_EVENT, 2000);
+                            _instance->SetBossState(DATA_GUNSHIP_EVENT, NOT_STARTED);
+                            break;
+                        case EVENT_RESTART_EVENT:
+                            _instance->SetBossState(DATA_GUNSHIP_EVENT, FAIL);
+                            RestartEvent(orgrimmar, CheckUnfriendlyShip(me,_instance,DATA_GB_MURADIN_BRONZEBEARD), map, HORDE);
+                            break;
+                        case EVENT_RENDING_THROW:
+                            if (UpdateVictim())
+                                if (me->getVictim()->IsWithinDistInMap(me, 50.0f, false)) // Todo: Fix the distance
+                                {
+                                    DoCastVictim(SPELL_RENDING_THROW);
+                                    EventScheduled = false;
+                               }
+                               else
+                                   events.CancelEvent(EVENT_RENDING_THROW);
+                            break;
+                        case EVENT_SPAWN_MAGE:
+                               Talk(SAY_NEW_BATTLE_MAGE_SPAWNED);
+                               orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_BATTLE_MAGE, 15.03016f, 0.00016f, 37.70952f, 1.55138f);
+                            break;
+                        case EVENT_RESPAWN_ROCKETEER:
+                            Talk(SAY_NEW_ROCKETEERS_SPAWNED);
+                            if(RocketerCount == 2)
+                            {
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, -11.44849f, -25.71838f, 33.64343f, 1.49248f);
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, 12.30336f, -25.69653f, 35.32373f, 1.49248f);
+                            }
+                            if(RocketerCount == 4)
+                            {
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, -11.44849f, -25.71838f, 33.64343f, 1.49248f);
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, 12.30336f, -25.69653f, 35.32373f, 1.49248f);
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, -3.44849f, -25.71838f, 34.21082f, 1.49248f);
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, 3.30336f, -25.69653f, 35.32373f, 1.49248f);
+                            }
+                            break;
+                         case EVENT_RESPAWN_AXES_RIFLEMEN:
+                            Talk(SAY_NEW_AXETHROWER_SPAWNED);
+                            if(AxesCount == 4)
+                            {
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -3.170555f, 28.30652f, 34.21082f, 1.66527f);
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -12.0928f, 27.65942f, 33.58557f, 1.66527f);
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 14.92804f, 26.18018f, 35.47803f, 1.66527f);
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 24.70331f, 25.36584f, 35.97845f, 1.66527f);
+                            }
+                            if(AxesCount == 6)
+                            {
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -3.170555f, 28.30652f, 34.21082f, 1.66527f);
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -12.0928f, 27.65942f, 33.58557f, 1.66527f);
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 14.92804f, 26.18018f, 35.47803f, 1.66527f);
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 24.70331f, 25.36584f, 35.97845f, 1.66527f);
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 19.92804f, 27.18018f, 35.47803f, 1.66527f);
+                                orgrimmar->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -7.70331f, 28.36584f, 33.88557f, 1.66527f);
+                           }
+                           break;
+                      }
+                }
+
+                if (!me->GetCurrentSpell(CURRENT_MELEE_SPELL))
+                    DoCastVictim(SPELL_CLEAVE);
+
+                DoMeleeAttackIfReady();
+            }
+
+
+            private:
+                Transport* orgrimmar;
+                uint32 RocketerDieCount;
+                uint32 AxesDieCount;
+                uint32 RocketerCount;
+                uint32 AxesCount;
+                uint32 SummonCount;
+                uint32 count;
+                bool EventScheduled;
+                Map* map;
+                EventMap events;
+                InstanceScript* _instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_saurfang_gunshipAI(pCreature);
+        }
+};
+
+// ***** OJO ******
+// Este portal no me gusta, hay que ver bien que carajo quiere hacer
+class npc_gunship_portal : public CreatureScript
+{
+    public:
+        npc_gunship_portal() : CreatureScript("npc_gunship_portal") { }
+
+        struct npc_gunship_portalAI : public Scripted_NoMovementAI
+        {
+            npc_gunship_portalAI(Creature *creature) : Scripted_NoMovementAI(creature),_instance(creature->GetInstanceScript())
+            {
+                Reset();
+            }
+
+            void Reset()
+            {
+               events.ScheduleEvent(EVENT_UNSUMMON_PORTAL, 20500); // TODO: Fix the timers
+               me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+            }
+
+            void JustDied(Unit* killer)
+            {
+                me->RemoveFromWorld();
+            }
+
+            void UpdateAI( const uint32 diff)
+            {
+
+             events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_UNSUMMON_PORTAL:
+                            me->RemoveFromWorld();
+                            break;
+                    }
+                }
+            }
+
+    private:
+        EventMap events;
+        InstanceScript* _instance;
+
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_gunship_portalAI(pCreature);
+        }
+};
+
+// ***** OJO *****
+// A este trigger hay que ponerle atencion para hacer bien su funcion
+class npc_gunship_trigger : public CreatureScript
+{
+    public:
+        npc_gunship_trigger() : CreatureScript("npc_gunship_trigger") { }
+
+        struct npc_gunship_triggerAI : public Scripted_NoMovementAI
+        {
+            npc_gunship_triggerAI(Creature *creature) : Scripted_NoMovementAI(creature),_instance(creature->GetInstanceScript())
+            {
+
+                Reset();
+            }
+
+            void Reset()
+            {
+                ScriptedAI::Reset();
+                me->SetReactState(REACT_PASSIVE);
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+            }
+
+            void EnterCombat(Unit* /*who*/)
+            {
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_DISABLE_MOVE);
+                SetCombatMovement(false);
+            }
+
+            void DamageTaken(Unit* attacker, uint32& damage)
+            {
+                damage = 0;
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+
+            }
+
+            private:
+                EventMap events;
+                InstanceScript* _instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_gunship_triggerAI(pCreature);
+        }
+};
+
+/* --------------------------------------------------------------------------------------------------------------------- */
+/* ---------------------------------------      TRASH!!! LO GUAPO        ----------------------------------------------- */
+/* --------------------------------------------------------------------------------------------------------------------- */
+
+// La muralla de las calaveras <-------------- Trashmob desde aqui (A REVISAR *****OJO****)
+/* Kor'kron Primalist  37030*/
+class npc_korkron_primalist: public CreatureScript
+{
+    public:
+        npc_korkron_primalist() : CreatureScript("npc_korkron_primalist") { }
+
+        struct npc_korkron_primalistAI : public ScriptedAI
+        {
+            npc_korkron_primalistAI(Creature* creature) : ScriptedAI(creature)
+            {
+                instance = creature->GetInstanceScript();
+            }
+
+            void Reset()
+            {
+                _started = instance->GetBossState(DATA_GUNSHIP_EVENT) == DONE;
+                events.Reset();
+                events.ScheduleEvent(EVENT_WRATH, 10000); // TODO: Fix the timers
+                events.ScheduleEvent(EVENT_HEAL, 20000); // TODO: Fix the timers
+            }
+
+            void MoveInLineOfSight(Unit* who)
+            {
+                if (!instance)
+                    return;
+
+                if (instance->GetData(DATA_TEAM_IN_INSTANCE) != HORDE)
+                    return;
+
+                if (who->GetTypeId() != TYPEID_PLAYER)
+                    return;
+
+                if (instance->GetData(DATA_FIRST_SQUAD_STATE) == DONE)
+                    return;
+
+                if (!_started && me->IsWithinDistInMap(who, 25.0f))
+                {
+                    _started = true;
+                    events.ScheduleEvent(EVENT_FIRST_SQUAD_ASSISTED_1, 1000);
+                    events.ScheduleEvent(EVENT_FIRST_SQUAD_ASSISTED_2, 15000); // TODO : fix the timer
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (!instance)
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_FIRST_SQUAD_ASSISTED_1:
+                            Talk(SAY_FIRST_SQUAD_RESCUED_HORDE_0);
+                            break;
+                        case EVENT_FIRST_SQUAD_ASSISTED_2:
+                            if (Creature* tempUnit = me->FindNearestCreature(NPC_KORKRON_INVOKER, 120.0f, true))
+                            {
+                                tempUnit->AI()->Talk(SAY_FIRST_SQUAD_RESCUED_HORDE_1);
+                                tempUnit->AI()->Talk(SAY_SUMMON_BATTLE_STANDARD);
+                                tempUnit->CastSpell(tempUnit, SPELL_SUMMON_BATTLE_STANDART_H, true);
+                            }
+                            instance->SetData(DATA_FIRST_SQUAD_STATE, DONE);
+                            break;
+                        case EVENT_WRATH:
+                            if (UpdateVictim())
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                    DoCast(target, SPELL_WRATH);
+                            events.ScheduleEvent(EVENT_WRATH, 10000);
+                            break;
+                        case EVENT_HEAL:
+                            if (UpdateVictim())
+                            {
+                                std::list<Unit*> TargetList;
+                                Unit* finalTarget = me;
+                                Trinity::AnyFriendlyUnitInObjectRangeCheck checker(me, me, 30.0f);
+                                Trinity::UnitListSearcher<Trinity::AnyFriendlyUnitInObjectRangeCheck> searcher(me, TargetList, checker);
+                                me->VisitNearbyObject(30.0f, searcher);
+                                for (std::list<Unit*>::iterator itr = TargetList.begin(); itr != TargetList.end(); ++itr)
+                                    if ((*itr)->GetHealthPct() < finalTarget->GetHealthPct())
+                                        finalTarget = *itr;
+
+                                uint32 spellId = SPELL_HEALING_TOUCH;
+                                uint32 healthPct = uint32(finalTarget->GetHealthPct());
+                                if (healthPct > 15 && healthPct < 20)
+                                    spellId = (urand (0, 1) ? SPELL_REGROWTH : SPELL_HEALING_TOUCH);
+                                else if (healthPct >= 20 && healthPct < 40)
+                                    spellId = SPELL_REGROWTH;
+                                else if (healthPct > 40)
+                                    spellId = (urand(0, 1) ? SPELL_REJUVENATION : SPELL_REGROWTH);
+
+                                me->CastSpell(finalTarget, spellId, false);
+                                events.ScheduleEvent(EVENT_HEAL, 20000);
+                            }
+                            break;
+                    }
+                }
+
+                DoMeleeAttackIfReady();
+            }
+
+            private:
+                bool _started;
+                EventMap events;
+                InstanceScript* instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_korkron_primalistAI(pCreature);
+        }
+};
+
+/* Kor'kron Defender  37032*/
+class npc_korkron_defender: public CreatureScript
+{
+    public:
+        npc_korkron_defender() : CreatureScript("npc_korkron_defender") { }
+
+        struct npc_korkron_defenderAI : public ScriptedAI
+        {
+            npc_korkron_defenderAI(Creature* creature) : ScriptedAI(creature)
+            {
+                instance = creature->GetInstanceScript();
+            }
+
+            void Reset()
+            {
+                events.Reset();
+                events.ScheduleEvent(EVENT_DEVASTATE, 10000);
+                events.ScheduleEvent(EVENT_THUNDERCLAP, 20000);
+                events.ScheduleEvent(EVENT_SPELL_REFLECT, 25000);
+                events.ScheduleEvent(EVENT_SUNDER_ARMOR, 15000);
+            }
+
+            void MoveInLineOfSight(Unit* who)
+            {
+                if (!instance)
+                    return;
+
+                if (instance->GetData(DATA_TEAM_IN_INSTANCE) != HORDE)
+                    return;
+
+                if (who->GetTypeId() != TYPEID_PLAYER)
+                    return;
+
+                if (me->IsWithinDistInMap(who, 25.0f))
+                {
+                    if (instance->GetData(DATA_FIRST_SQUAD_STATE) == DONE && instance->GetData(DATA_SECOND_SQUAD_STATE) != DONE)
+                    {
+                        instance->SetData(DATA_SECOND_SQUAD_STATE, DONE);
+                        events.ScheduleEvent(EVENT_SECOND_SQUAD_ASSISTED_1, 1000);
+                        events.ScheduleEvent(EVENT_SECOND_SQUAD_ASSISTED_2, 15000); // TODO : fix the timer
+                    }
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (!instance)
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_SECOND_SQUAD_ASSISTED_1:
+                            Talk(SAY_SECOND_SQUAD_RESCUED_HORDE_0);
+                            break;
+                        case EVENT_SECOND_SQUAD_ASSISTED_2:
+                            Talk(SAY_SECOND_SQUAD_RESCUED_HORDE_1);
+                            Talk(SAY_FROSTWYRM_SUMMON_0);
+                            break;
+                        case EVENT_DEVASTATE:
+                            if (UpdateVictim())
+                            {
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                                    DoCast(target, SPELL_DEVASTATE);
+                            }
+                            events.ScheduleEvent(EVENT_DEVASTATE, 10000);
+                            break;
+                        case EVENT_SPELL_REFLECT:
+                            if (UpdateVictim())
+                            {
+                                DoCast(me, SPELL_SPELL_REFLECT);
+                            }
+                            events.ScheduleEvent(EVENT_SPELL_REFLECT, 25000);
+                            break;
+                        case EVENT_THUNDERCLAP:
+                            if (UpdateVictim())
+                            {
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1))
+                                    DoCast(target, SPELL_THUNDERCLAP);
+                            }
+                            events.ScheduleEvent(EVENT_THUNDERCLAP, 20000);
+                            break;
+                        case EVENT_SUNDER_ARMOR:
+                            if (UpdateVictim())
+                            {
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1))
+                                    DoCast(target, SPELL_SUNDER_ARMOR);
+                            }
+                            events.ScheduleEvent(EVENT_SUNDER_ARMOR, 15000);
+                            break;
+                    }
+                }
+
+                DoMeleeAttackIfReady();
+            }
+
+            private:
+                EventMap events;
+                InstanceScript* instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_korkron_defenderAI(pCreature);
+        }
+};
+
+/* Skybreaker Vindicator  37003*/
+class npc_skybreaker_vindicator: public CreatureScript
+{
+    public:
+        npc_skybreaker_vindicator() : CreatureScript("npc_skybreaker_vindicator") { }
+
+        struct npc_skybreaker_vindicatorAI : public ScriptedAI
+        {
+            npc_skybreaker_vindicatorAI(Creature* creature) : ScriptedAI(creature)
+            {
+                instance = creature->GetInstanceScript();
+            }
+
+            void Reset()
+            {
+                _started = instance->GetBossState(DATA_GUNSHIP_EVENT) == DONE;
+                events.Reset();
+                events.ScheduleEvent(EVENT_AVENGERS_SHILED, 10000); // TODO: Fix the timers
+                events.ScheduleEvent(EVENT_CONCENTRATION, 20000); // TODO: Fix the timers
+                events.ScheduleEvent(EVENT_HOLY_WRATH, 20000); // TODO: Fix the timers
+            }
+
+            void MoveInLineOfSight(Unit* who)
+            {
+                if (!instance)
+                    return;
+
+                if (instance->GetData(DATA_TEAM_IN_INSTANCE) != ALLIANCE)
+                    return;
+
+                if (who->GetTypeId() != TYPEID_PLAYER)
+                    return;
+
+                if (instance->GetData(DATA_FIRST_SQUAD_STATE) == DONE)
+                    return;
+
+                if (!_started && me->IsWithinDistInMap(who, 25.0f))
+                {
+                    _started = true;
+                    events.ScheduleEvent(EVENT_FIRST_SQUAD_ASSISTED_1, 1000);
+                    events.ScheduleEvent(EVENT_FIRST_SQUAD_ASSISTED_2, 15000); // TODO : fix the timer
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (!instance)
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_FIRST_SQUAD_ASSISTED_1:
+                            Talk(SAY_FIRST_SQUAD_RESCUED_ALLIANCE_0);
+                            break;
+                        case EVENT_FIRST_SQUAD_ASSISTED_2:
+                            if (Creature* tempUnit = me->FindNearestCreature(NPC_SKYBREAKER_SORCERER, 120.0f, true))
+                            {
+                                tempUnit->AI()->Talk(SAY_FIRST_SQUAD_RESCUED_ALLIANCE_1);
+                                tempUnit->AI()->Talk(SAY_SUMMON_BATTLE_STANDARD);
+                                tempUnit->CastSpell(tempUnit, SPELL_SUMMON_BATTLE_STANDART_A, true);
+                            }
+                            instance->SetData(DATA_FIRST_SQUAD_STATE, DONE);
+                            break;
+                        case EVENT_AVENGERS_SHILED:
+                            if (UpdateVictim())
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                    DoCast(target, SPELL_WRATH);
+                            events.ScheduleEvent(EVENT_AVENGERS_SHILED, 10000);
+                            break;
+                        case EVENT_CONCENTRATION:
+                            if (UpdateVictim())
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                    DoCast(target, SPELL_CONCENTRATION);
+                            events.ScheduleEvent(EVENT_CONCENTRATION, 20000);
+                            break;
+                        case EVENT_HOLY_WRATH:
+                            if (UpdateVictim())
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                    DoCast(target, SPELL_HOLY_WRATH);
+                            events.ScheduleEvent(EVENT_HOLY_WRATH, 15000);
+                            break;
+                    }
+                }
+
+                DoMeleeAttackIfReady();
+            }
+
+            private:
+                bool _started;
+                EventMap events;
+                InstanceScript* instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_skybreaker_vindicatorAI(pCreature);
+        }
+};
+
+/* Skybreaker Protector  36998*/
+class npc_skybreaker_protector: public CreatureScript
+{
+    public:
+        npc_skybreaker_protector() : CreatureScript("npc_skybreaker_protector") { }
+
+        struct npc_skybreaker_protectorAI : public ScriptedAI
+        {
+            npc_skybreaker_protectorAI(Creature* creature) : ScriptedAI(creature)
+            {
+                instance = creature->GetInstanceScript();
+            }
+
+            void Reset()
+            {
+                events.Reset();
+                events.ScheduleEvent(EVENT_DEVASTATE, 10000);
+                events.ScheduleEvent(EVENT_THUNDERCLAP, 20000);
+                events.ScheduleEvent(EVENT_SPELL_REFLECT, 25000);
+                events.ScheduleEvent(EVENT_SUNDER_ARMOR, 15000);
+            }
+
+            void MoveInLineOfSight(Unit* who)
+            {
+                if (!instance)
+                    return;
+
+                if (instance->GetData(DATA_TEAM_IN_INSTANCE) != ALLIANCE)
+                    return;
+
+                if (who->GetTypeId() != TYPEID_PLAYER)
+                    return;
+
+                if (me->IsWithinDistInMap(who, 25.0f))
+                {
+                    if (instance->GetData(DATA_FIRST_SQUAD_STATE) == DONE && instance->GetData(DATA_SECOND_SQUAD_STATE) != DONE)
+                    {
+                        instance->SetData(DATA_SECOND_SQUAD_STATE, DONE);
+                        events.ScheduleEvent(EVENT_SECOND_SQUAD_ASSISTED_1, 1000);
+                        events.ScheduleEvent(EVENT_SECOND_SQUAD_ASSISTED_2, 11000); // TODO : fix the timer
+                        events.ScheduleEvent(EVENT_SECOND_SQUAD_ASSISTED_3, 17000); // TODO : fix the timer
+                    }
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (!instance)
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_SECOND_SQUAD_ASSISTED_1:
+                            Talk(SAY_SECOND_SQUAD_RESCUED_ALLIANCE_0);
+                            break;
+                        case EVENT_SECOND_SQUAD_ASSISTED_2:
+                            Talk(SAY_SECOND_SQUAD_RESCUED_ALLIANCE_1);
+                            break;
+                        case EVENT_SECOND_SQUAD_ASSISTED_3:
+                            Talk(SAY_SECOND_SQUAD_RESCUED_ALLIANCE_2);
+                            Talk(SAY_FROSTWYRM_SUMMON_1);
+                            break;
+                        case EVENT_DEVASTATE:
+                            if (UpdateVictim())
+                            {
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                                    DoCast(target, SPELL_DEVASTATE);
+                            }
+                            events.ScheduleEvent(EVENT_DEVASTATE, 10000);
+                            break;
+                        case EVENT_SPELL_REFLECT:
+                            if (UpdateVictim())
+                            {
+                                DoCast(me, SPELL_SPELL_REFLECT);
+                            }
+                            events.ScheduleEvent(EVENT_SPELL_REFLECT, 25000);
+                            break;
+                        case EVENT_THUNDERCLAP:
+                            if (UpdateVictim())
+                            {
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1))
+                                    DoCast(target, SPELL_THUNDERCLAP);
+                            }
+                            events.ScheduleEvent(EVENT_THUNDERCLAP, 20000);
+                            break;
+                        case EVENT_SUNDER_ARMOR:
+                            if (UpdateVictim())
+                            {
+                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1))
+                                    DoCast(target, SPELL_SUNDER_ARMOR);
+                            }
+                            events.ScheduleEvent(EVENT_SUNDER_ARMOR, 15000);
+                            break;
+                    }
+                }
+
+                DoMeleeAttackIfReady();
+            }
+
+            private:
+                EventMap events;
+                InstanceScript* instance;
+        };
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_skybreaker_protectorAI(pCreature);
+        }
+};
+
+
+/* Spire Frostwyrm  37230*/
+class npc_icc_spire_frostwyrm: public CreatureScript
+{
+    public:
+        npc_icc_spire_frostwyrm() : CreatureScript("npc_icc_spire_frostwyrm") { }
+
+        struct npc_icc_spire_frostwyrmAI : public ScriptedAI
+        {
+            npc_icc_spire_frostwyrmAI(Creature* creature) : ScriptedAI(creature)
+            {
+                instance = creature->GetInstanceScript();
+            }
+
+            void Reset()
+            {
+                landed = false;
+                events.Reset();
+                me->SetFlying(true);
+                me->SetReactState(REACT_AGGRESSIVE);
+                me->AddUnitMovementFlag(MOVEMENTFLAG_LEVITATING);
+                events.ScheduleEvent(EVENT_FROST_BREATH, 20000);
+                events.ScheduleEvent(EVENT_BLIZZARD, 25000);
+                events.ScheduleEvent(EVENT_CLEAVE, 10000);
+            }
+
+            void MoveInLineOfSight(Unit* who)
+            {
+                if (!instance)
+                    return;
+
+                if (who->GetTypeId() != TYPEID_PLAYER)
+                    return;
+
+                if (!who->isTargetableForAttack())
+                    return;
+
+                if (!landed && me->IsWithinDistInMap(who, 35.0f))
+                {
+                    if (instance->GetData(DATA_TEAM_IN_INSTANCE) == HORDE)
+                        Talk(SAY_FROSTWYRM_LAND_H_0);
+                    else
+                        Talk(SAY_FROSTWYRM_LAND_A_1);
+                    landed = true;
+                    me->SetFlying(false);
+                    me->RemoveUnitMovementFlag(MOVEMENTFLAG_LEVITATING);
+                    me->SetInCombatWith(who);
+                    me->AddThreat(who, 1.0f);
+                    me->GetMotionMaster()->MoveChase(who);
+                }
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (!UpdateVictim())
+                    return;
+
+                if (me->HasUnitState(UNIT_STATE_CASTING))
+                    return;
+
+                events.Update(diff);
+
+                while (uint32 eventId = events.ExecuteEvent())
+                {
+                    switch (eventId)
+                    {
+                        case EVENT_FROST_BREATH:
+                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                DoCast(target, SPELL_FROST_BREATH);
+                            events.ScheduleEvent(EVENT_FROST_BREATH, 20000);
+                            break;
+                        case EVENT_BLIZZARD:
+                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                DoCast(target, SPELL_BLIZZARD);
+                            events.ScheduleEvent(EVENT_BLIZZARD, 25000);
+                            break;
+                        case EVENT_CLEAVE:
+                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 10.0f))
+                                DoCast(target, SPELL_FROST_CLEAVE);
+                            events.ScheduleEvent(EVENT_CLEAVE, 10000);
+                            break;
+                    }
+                }
+
+                DoMeleeAttackIfReady();
+            }
+
+            private:
+                bool landed;
+                EventMap events;
+                InstanceScript* instance;
+        };
+
+        CreatureAI* GetAI(Creature* pCreature) const
+        {
+            return new npc_icc_spire_frostwyrmAI(pCreature);
+        }
+};
+/* --------------------------------------------------------------------------------------------------------------------- */
+/* ----------------------------------------------      PARA LOS FROSTWYRMS        ------------------------------------------------------ */
+/* --------------------------------------------------------------------------------------------------------------------- */
+
+// ***** OJO ***** aqui con los areatriggers para que bajen los frostwyrms
+// Esta parte hay q mirar luego a ver que tal va
+
+class at_icc_land_frostwyrm : public AreaTriggerScript
+{
+    public:
+        at_icc_land_frostwyrm() : AreaTriggerScript("at_icc_land_frostwyrm") { }
+
+        bool OnTrigger(Player* player, AreaTriggerEntry const* areaTrigger)
+        {
+            if (InstanceScript* instance = player->GetInstanceScript())
+            {
+                if (instance->GetData(DATA_SPIRE_FROSTWYRM_STATE) == NOT_STARTED && instance->GetData(DATA_SECOND_SQUAD_STATE) == DONE)
+                {
+                    if (instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+                        player->GetMap()->SummonCreature(NPC_SPIRE_FROSTWYRM, FrostWyrmPosA);
+                    else
+                        player->GetMap()->SummonCreature(NPC_SPIRE_FROSTWYRM, FrostWyrmPosH);
+
+                    instance->SetData(DATA_SPIRE_FROSTWYRM_STATE, IN_PROGRESS);
+                }
+            }
+
+            return true;
+        }
+};
+
+/* --------------------------------------------------------------------------------------------------------------------- */
+/* ------------------------------------------      PARA LA NAVE        ------------------------------------------------- */
+/* --------------------------------------------------------------------------------------------------------------------- */
+
+// ******* OJO ******** aqui esta lo chungo <----- sobre el transporte que se mueve y tal
+/* transport script */
+class transport_gunship : public TransportScript
+{
+    public:
+        transport_gunship() : TransportScript("transport_gunship") { }
+
+        void OnRelocate(Transport* transport, uint32 waypointId, uint32 mapId, float x, float y, float z)
+        {
+        }
+
+        void OnAddPassenger(Transport* transport, Player* player)
+        {
+            if (!transport || !player)
+                return;
+
+            switch (transport->GetEntry())
+            {
+                case GO_THE_SKYBREAKER_ALLIANCE_ICC:
+                    player->AddAura(SPELL_ON_SKYBREAKERS_DECK, player);
+                    break;
+                case GO_ORGRIM_S_HAMMER_HORDE_ICC:
+                    player->AddAura(SPELL_ON_ORGRIMS_HAMMERS_DECK, player);
+                    break;
+                default:
+                    break;
+            }
+        }
+
+        void OnRemovePassenger(Transport* /*transport*/, Player* player)
+        {
+            if (!player)
+                return;
+
+            player->RemoveAurasDueToSpell(SPELL_ON_ORGRIMS_HAMMERS_DECK);
+            player->RemoveAurasDueToSpell(SPELL_ON_SKYBREAKERS_DECK);
+        }
+};
+
+/* --------------------------------------------------------------------------------------------------------------------- */
+/* ------------------------------------------      SCRIPT SPELLS        ------------------------------------------------ */
+/* --------------------------------------------------------------------------------------------------------------------- */
+/* Remove Rocket Pack - 70713 */
+class spell_icc_remove_rocket_pack : public SpellScriptLoader
+{
+    public:
+        spell_icc_remove_rocket_pack() : SpellScriptLoader("spell_icc_remove_rocket_pack") { }
+
+        class spell_icc_remove_rocket_pack_SpellScript : public SpellScript
+        {
+            PrepareSpellScript(spell_icc_remove_rocket_pack_SpellScript);
+
+            void HandleEffect(SpellEffIndex /*effIndex*/)
+            {
+                Player* hitPlr = GetHitPlayer();
+                if (!hitPlr) // If player is offline
+                    return;
+
+                int32 itemId = GetEffectValue();
+                uint32 itemCount = hitPlr->GetItemCount(itemId, false); // Should be 1, but just in case.
+                hitPlr->DestroyItemCount(itemId, itemCount, true, false);
+            }
+
+            void Register()
+            {
+                OnEffectHitTarget += SpellEffectFn(spell_icc_remove_rocket_pack_SpellScript::HandleEffect, EFFECT_0, SPELL_EFFECT_SCRIPT_EFFECT);
+            }
+        };
+
+        SpellScript* GetSpellScript() const
+        {
+            return new spell_icc_remove_rocket_pack_SpellScript();
+        }
+};
+
+/* spell 69471 Heat Drain */
+class spell_gb_heat_drain : public SpellScriptLoader
+{
+    public:
+        spell_gb_heat_drain() : SpellScriptLoader("spell_gb_heat_drain") { }
+
+        class spell_gb_heat_drain_SpellScript : public SpellScript
+        {
+            PrepareSpellScript(spell_gb_heat_drain_SpellScript);
+
+            void HandleDummy(SpellEffIndex /*effIndex*/)
+            {
+                Unit* caster = GetCaster();
+
+                if (caster->GetPower(POWER_ENERGY) != 0)
+                    caster->ModifyPower(POWER_ENERGY, -1);
+
+                if (caster->GetPower(POWER_ENERGY) >= 99)
+                    caster->CastSpell(caster, SPELL_OVERHEAT, true);
+            }
+
+            void Register()
+            {
+                OnEffectHit += SpellEffectFn(spell_gb_heat_drain_SpellScript::HandleDummy, EFFECT_0, SPELL_EFFECT_DUMMY);
+            }
+        };
+
+        SpellScript* GetSpellScript() const
+        {
+            return new spell_gb_heat_drain_SpellScript();
+        }
+};
+
+/* spell 69488 Overheat Drain */
+class spell_gb_overheat_drain : public SpellScriptLoader
+{
+    public:
+        spell_gb_overheat_drain() : SpellScriptLoader("spell_gb_overheat_drain") { }
+
+        class spell_gb_overheat_drain_SpellScript : public SpellScript
+        {
+            PrepareSpellScript(spell_gb_overheat_drain_SpellScript);
+
+            void HandleDummy(SpellEffIndex /*effIndex*/)
+            {
+                Unit* caster = GetCaster();
+
+                if (caster->GetPower(POWER_ENERGY) >= 10)
+                    caster->ModifyPower(POWER_ENERGY, -10);
+            }
+
+            void Register()
+            {
+                OnEffectHit += SpellEffectFn(spell_gb_overheat_drain_SpellScript::HandleDummy, EFFECT_0, SPELL_EFFECT_DUMMY);
+            }
+        };
+
+        SpellScript* GetSpellScript() const
+        {
+            return new spell_gb_overheat_drain_SpellScript();
+        }
+};
+
+/* spell 69402 Incinerating Blast */
+class spell_gb_incinerating_blast : public SpellScriptLoader
+{
+    public:
+        spell_gb_incinerating_blast() : SpellScriptLoader("spell_gb_incinerating_blast") { }
+
+        class spell_gb_incinerating_blast_SpellScript : public SpellScript
+        {
+            PrepareSpellScript(spell_gb_incinerating_blast_SpellScript);
+
+            void AddExtraDamage()
+            {
+                Unit* caster = GetCaster();
+                if (!caster || !caster->GetPower(POWER_ENERGY))
+                    return;
+
+                SetHitDamage(int32(GetHitDamage() + (caster->GetPower(POWER_ENERGY) * 100.0f))); // TODO: How much should be?
+                caster->SetPower(POWER_ENERGY, 0);
+            }
+
+            void Register()
+            {
+                OnHit += SpellHitFn(spell_gb_incinerating_blast_SpellScript::AddExtraDamage);
+            }
+        };
+
+        SpellScript* GetSpellScript() const
+        {
+            return new spell_gb_incinerating_blast_SpellScript();
+        }
+};
+
+/* spell 71335, 70339 Burning Pitch */
+class spell_gb_burning_pitch : public SpellScriptLoader
+{
+    public:
+        spell_gb_burning_pitch() : SpellScriptLoader("spell_gb_burning_pitch") { }
+
+        class spell_gb_burning_pitch_SpellScript : public SpellScript
+        {
+            PrepareSpellScript(spell_gb_burning_pitch_SpellScript);
+
+            bool Validate(SpellInfo const* /*spellInfo*/)
+            {
+                if (!sSpellMgr->GetSpellInfo(SPELL_BURNING_PITCH_SIEGE_DMG_A))
+                    return false;
+                if (!sSpellMgr->GetSpellInfo(SPELL_BURNING_PITCH_SIEGE_DMG_H))
+                    return false;
+                if (!sSpellMgr->GetSpellInfo(SPELL_BURNING_PITCH_AOE_DAMAGE))
+                    return false;
+                return true;
+            }
+
+            void HandleDummy(SpellEffIndex /*effIndex*/)
+            {
+                Unit* caster = GetCaster();
+                Unit* target = GetHitUnit();
+
+                if (!caster || !target)
+                    return;
+
+                if (GetSpellInfo()->Id == SPELL_BURNING_PITCH_A)
+                    caster->CastSpell(target, SPELL_BURNING_PITCH_SIEGE_DMG_A, true);
+                else
+                    caster->CastSpell(target, SPELL_BURNING_PITCH_SIEGE_DMG_H, true);
+
+                caster->CastSpell(target, SPELL_BURNING_PITCH_AOE_DAMAGE, true);
+            }
+
+            void Register()
+            {
+                OnEffectHitTarget += SpellEffectFn(spell_gb_burning_pitch_SpellScript::HandleDummy, EFFECT_0, SPELL_EFFECT_DUMMY);
+            }
+        };
+
+        SpellScript* GetSpellScript() const
+        {
+            return new spell_gb_burning_pitch_SpellScript();
+        }
+};
+
+/* spell 68645 Rocket Pack */
+class spell_rocket_pack : public SpellScriptLoader
+{
+    public:
+        spell_rocket_pack() : SpellScriptLoader("spell_rocket_pack") { }
+
+        class spell_rocket_pack_AuraScript : public AuraScript
+        {
+            PrepareAuraScript(spell_rocket_pack_AuraScript);
+
+            void OnApply(AuraEffect const* /*aurEff*/, AuraEffectHandleModes /*mode*/)
+            {
+                GetTarget()->CastSpell(GetTarget(), 68721, true);
+            }
+
+            void OnRemove(AuraEffect const* /*aurEff*/, AuraEffectHandleModes /*mode*/)
+            {
+                GetTarget()->RemoveAurasDueToSpell(68721);
+            }
+
+            void Register()
+            {
+                OnEffectApply += AuraEffectApplyFn(spell_rocket_pack_AuraScript::OnApply, EFFECT_1, SPELL_AURA_DUMMY, AURA_EFFECT_HANDLE_REAL);
+                OnEffectRemove += AuraEffectRemoveFn(spell_rocket_pack_AuraScript::OnRemove, EFFECT_1, SPELL_AURA_DUMMY, AURA_EFFECT_HANDLE_REAL);
+            }
+        };
+
+        AuraScript* GetAuraScript() const
+        {
+            return new spell_rocket_pack_AuraScript();
+        }
+};
+
+void AddSC_boss_gunship_battle_wowrean()
+{
+    new npc_muradin_gunship();
+    new npc_saurfang_gunship();
+    new npc_zafod_boombox();
+    new npc_korkron_axethrower_rifleman();
+    new npc_mortar_soldier_or_rocketeer();
+    new npc_gunship_mage();
+    new npc_gunship_cannon();
+    new npc_sergeant();
+    new npc_marine_or_reaver();
+    new npc_gunship_trigger();
+    new npc_gunship_portal();
+    new npc_korkron_primalist();
+    new npc_korkron_defender();
+    new npc_skybreaker_vindicator();
+    new npc_skybreaker_protector();
+    new npc_icc_spire_frostwyrm();
+    new at_icc_land_frostwyrm();
+    new npc_gunship_skybreaker();
+    new npc_gunship_orgrimmar();
+    new transport_gunship();
+    new spell_icc_remove_rocket_pack();
+    new spell_gb_heat_drain();
+    new spell_gb_overheat_drain();
+    new spell_gb_incinerating_blast();
+    new spell_gb_burning_pitch();
+    new spell_rocket_pack();
+}
\ No newline at end of file
diff --git a/src/server/scripts/Northrend/IcecrownCitadel/icecrown_citadel.h b/src/server/scripts/Northrend/IcecrownCitadel/icecrown_citadel.h
index 9e33584..9ff5fa8 100755
--- a/src/server/scripts/Northrend/IcecrownCitadel/icecrown_citadel.h
+++ b/src/server/scripts/Northrend/IcecrownCitadel/icecrown_citadel.h
@@ -110,6 +110,26 @@ enum DataTypes
     DATA_HIGHLORD_TIRION_FORDRING   = 37,
     DATA_ARTHAS_PLATFORM            = 38,
     DATA_TERENAS_MENETHIL           = 39,
+
+    // Gunship: Datos para logros
+    DATA_BEEN_WAITING_ACHIEVEMENT   = 49,
+    DATA_NECK_DEEP_ACHIEVEMENT      = 50,
+
+    // Gunship: Datos para la pelea
+    // La numeracion es muy arriba por seguridad
+    DATA_FIRST_SQUAD_STATE                  = 100,
+    DATA_SECOND_SQUAD_STATE                 = 101,
+    DATA_SPIRE_FROSTWYRM_STATE              = 102,
+    DATA_GB_HIGH_OVERLORD_SAURFANG          = 103,
+    DATA_GB_MURADIN_BRONZEBEARD             = 104,
+    DATA_HIGH_OVERLORD_SAURFANG_NOT_VISUAL  = 105,
+    DATA_GB_BATTLE_MAGE                     = 106,
+    DATA_SKYBREAKER_BOSS                    = 107,
+    DATA_ORGRIMMAR_HAMMER_BOSS              = 108,
+    DATA_MURADIN_BRONZEBEARD_NOT_VISUAL     = 109,
+    DATA_MURADIN_BRONZEBEARD                = 110,
+    DATA_GUNSHIP_BATTLE                     = 111,
+    GUID_PLAYER_LOCATION                    = 112,
 };
 
 enum CreaturesIds
@@ -276,6 +296,38 @@ enum CreaturesIds
     NPC_WORLD_TRIGGER_INFINITE_AOI              = 36171,
     NPC_SPIRIT_BOMB                             = 39189,
     NPC_FROSTMOURNE_TRIGGER                     = 38584,
+
+    // Gunship: Ids de los npcs
+    NPC_GB_SKYBREAKER                           = 37540,
+    NPC_GB_ORGRIMS_HAMMER                       = 37215,
+    NPC_GB_HIGH_OVERLORD_SAURFANG               = 36939,
+    NPC_GB_MURADIN_BRONZEBEARD                  = 36948,
+    NPC_GB_HIHG_CAPTAIN_JUSTIN_BARTLETT         = 37182,
+    NPC_GB_HIGH_OVERLORD_SAURFANG_NOT_VISUAL    = 50004,
+    NPC_GB_MURADIN_BRONZEBEARD_NOT_VISUAL       = 50006,
+    NPC_GB_SKYBREAKER_SORCERER                  = 37026,
+    NPC_GB_SKYBREAKER_SORCERERS                 = 37116,
+    NPC_GB_KORKRON_REAVER                       = 37920,
+    NPC_GB_KORKRON_REAVERS                      = 36957,
+    NPC_GB_KORKRON_SERGANTE                     = 36960,
+    NPC_GB_SKYBREAKER_SERGANTE                  = 36961,
+    NPC_GB_KORKRON_BATTLE_MAGE                  = 37117,
+    NPC_GB_SKYBREAKER_MARINE                    = 36950,
+    NPC_GB_KORKRON_ROCKETEER                    = 36982,
+    NPC_GB_SKYBREAKER_MORTAR_SOLDIER            = 36978,
+    NPC_GB_KORKRON_AXETHROWER                   = 36968,
+    NPC_GB_SKYBREAKER_RIFLEMAN                  = 36969,
+    NPC_GB_SKYBREAKER_DECKHAND                  = 36970,
+    NPC_GB_ZAFOD_BOOMBOX                        = 37184,
+    NPC_GB_ALLIANCE_CANON                       = 36838,
+    NPC_GB_HORDE_CANON                          = 36839,
+    NPC_GB_INVISIBLE_STALKER                    = 32780,
+    NPC_GB_PORTAL                               = 37227,
+    NPC_GB_GUNSHIP_HULL                         = 37547,
+    // Gunship: Ids faltantes del trash
+    NPC_KORKRON_INVOKER                         = 37033,
+    NPC_SPIRE_FROSTWYRM                         = 37230,
+    NPC_SKYBREAKER_SORCERER                     = 37026,
 };
 
 enum GameObjectsIds
@@ -360,6 +412,21 @@ enum GameObjectsIds
     GO_FROZEN_LAVAMAN                       = 202436,
     GO_LAVAMAN_PILLARS_CHAINED              = 202437,
     GO_LAVAMAN_PILLARS_UNCHAINED            = 202438,
+
+// ATENTO CON ESTOS GOS, A VER QUE SE HACE EN EL .CPP
+    //Gunship: Ids de los Gameobjects
+    GO_ORGRIM_S_HAMMER_HORDE_ICC            = 201812,
+    GO_ORGRIM_S_HAMMER_ALLIANCE_ICC         = 201581,
+    GO_THE_SKYBREAKER_HORDE_ICC             = 201811,
+    GO_THE_SKYBREAKER_ALLIANCE_ICC          = 201580,
+    GO_CAPITAN_CHEST_A_10N                  = 201872,
+    GO_CAPITAN_CHEST_A_25N                  = 201873,
+    GO_CAPITAN_CHEST_A_10H                  = 201874,
+    GO_CAPITAN_CHEST_A_25H                  = 201875,
+    GO_CAPITAN_CHEST_H_10N                  = 202177,
+    GO_CAPITAN_CHEST_H_25N                  = 202178,
+    GO_CAPITAN_CHEST_H_10H                  = 202179,
+    GO_CAPITAN_CHEST_H_25H                  = 202180,
 };
 
 enum AchievementCriteriaIds
diff --git a/src/server/scripts/Northrend/IcecrownCitadel/instance_icecrown_citadel.cpp b/src/server/scripts/Northrend/IcecrownCitadel/instance_icecrown_citadel.cpp
index ebd0973..499517e 100755
--- a/src/server/scripts/Northrend/IcecrownCitadel/instance_icecrown_citadel.cpp
+++ b/src/server/scripts/Northrend/IcecrownCitadel/instance_icecrown_citadel.cpp
@@ -23,6 +23,8 @@
 #include "PoolMgr.h"
 #include "AccountMgr.h"
 #include "icecrown_citadel.h"
+#include "MapManager.h"
+#include "Transport.h"
 
 enum EventIds
 {
@@ -156,6 +158,19 @@ class instance_icecrown_citadel : public InstanceMapScript
                 ColdflameJetsState = NOT_STARTED;
                 BloodQuickeningState = NOT_STARTED;
                 BloodQuickeningMinutes = 0;
+// ******* OJO ******* Aqui hay que ver que se hace con estos
+                // Gunship: Holders para el script
+                FirstSquadState = 0;
+                SecondSquadState = 0;
+                SpireSquadState = 0;
+                SkybreakerBossGUID = 0;
+                OrgrimmarBossGUID = 0;
+                DeathbringerSaurfangGbGUID = 0;
+                MuradinBronzebeardGbGUID = 0;
+                DeathbringerSaurfangNotVisualGUID = 0;
+                MuradinBronzebeardNotVisualGUID = 0;
+                GbBattleMageGUID = 0;
+                isPrepared = false;
             }
 
             void FillInitialWorldStates(WorldPacket& data)
@@ -174,6 +189,8 @@ class instance_icecrown_citadel : public InstanceMapScript
 
                 if (instance->IsHeroic())
                     Events.ScheduleEvent(EVENT_CHECK_HERO_ACHIEVEMENT, 10000);
+                // Gunship: Precargar el spawn
+                PrepareGunshipEvent(player); // <-- ojala halle una manera para esto
             }
 
             void OnCreatureCreate(Creature* creature)
@@ -308,6 +325,29 @@ class instance_icecrown_citadel : public InstanceMapScript
                     case NPC_TERENAS_MENETHIL_FROSTMOURNE_H:
                         TerenasMenethilGUID = creature->GetGUID();
                         break;
+                    //Gunship: Asignaciones
+                    case NPC_GB_SKYBREAKER:
+                        SkybreakerBossGUID = creature->GetGUID();
+                        break;
+                    case NPC_GB_ORGRIMS_HAMMER:
+                        OrgrimmarBossGUID = creature->GetGUID();
+                        break;
+                    case NPC_GB_HIGH_OVERLORD_SAURFANG:
+                        DeathbringerSaurfangGbGUID = creature->GetGUID();
+                        break;
+                    case NPC_GB_MURADIN_BRONZEBEARD:
+                        MuradinBronzebeardGbGUID = creature->GetGUID();
+                        break;
+                    case NPC_GB_HIGH_OVERLORD_SAURFANG_NOT_VISUAL:
+                        DeathbringerSaurfangNotVisualGUID = creature->GetGUID();
+                        break;
+                    case NPC_GB_MURADIN_BRONZEBEARD_NOT_VISUAL:
+                        MuradinBronzebeardNotVisualGUID = creature->GetGUID();
+                        break;
+                    case NPC_GB_SKYBREAKER_SORCERERS:
+                    case NPC_GB_KORKRON_BATTLE_MAGE:
+                        GbBattleMageGUID = creature->GetGUID();
+                        break;
                     default:
                         break;
                 }
@@ -366,7 +406,7 @@ class instance_icecrown_citadel : public InstanceMapScript
                         break;
                 }
             }
-
+// DENTRO DE ESTA CREATE FALTAN GOS PARA GUNSHIP, DEPENDIENDO LO Q SE QUIERA HACER
             void OnGameObjectCreate(GameObject* go)
             {
                 switch (go->GetEntry())
@@ -630,6 +670,22 @@ class instance_icecrown_citadel : public InstanceMapScript
                         return ArthasPlatformGUID;
                     case DATA_TERENAS_MENETHIL:
                         return TerenasMenethilGUID;
+// * OJO * Aqui faltan DATAS, como el de los frostwyrm el de firstsquad que no hay
+                    //Gunship: Para unir todo
+                    case DATA_SKYBREAKER_BOSS:
+                        return SkybreakerBossGUID;
+                    case DATA_ORGRIMMAR_HAMMER_BOSS:
+                        return OrgrimmarBossGUID;
+                    case DATA_GB_HIGH_OVERLORD_SAURFANG:
+                        return DeathbringerSaurfangGbGUID;
+                    case DATA_GB_MURADIN_BRONZEBEARD:
+                        return MuradinBronzebeardGbGUID;
+                    case DATA_HIGH_OVERLORD_SAURFANG_NOT_VISUAL:
+                        return DeathbringerSaurfangNotVisualGUID;
+                    case DATA_MURADIN_BRONZEBEARD_NOT_VISUAL:
+                        return MuradinBronzebeardNotVisualGUID;
+                    case DATA_GB_BATTLE_MAGE:
+                        return GbBattleMageGUID;
                     default:
                         break;
                 }
@@ -645,7 +701,7 @@ class instance_icecrown_citadel : public InstanceMapScript
                 switch (type)
                 {
                     case DATA_LADY_DEATHWHISPER:
-                        SetBossState(DATA_GUNSHIP_EVENT, state);    // TEMP HACK UNTIL GUNSHIP SCRIPTED
+                        // SetBossState(DATA_GUNSHIP_EVENT, state);    // TEMP HACK UNTIL GUNSHIP SCRIPTED
                         if (state == DONE)
                         {
                             if (GameObject* elevator = instance->GetGameObject(LadyDeathwisperElevatorGUID))
@@ -655,6 +711,9 @@ class instance_icecrown_citadel : public InstanceMapScript
                             }
                         }
                         break;
+// ******* OJO ********* AQUI FALTA EL CASE DE GUNSHIP 
+// a saber que se hace luego que se acaba, si se spamea algo, se les da un logro
+// les aparecemos algun npc o alguna cosa estilo wowrean.
                     case DATA_DEATHBRINGER_SAURFANG:
                         switch (state)
                         {
@@ -1294,6 +1353,209 @@ class instance_icecrown_citadel : public InstanceMapScript
                         break;
                 }
             }
+/* ---------------------- ARREGLAR ESTO ----------------------- */
+            // Gunship: esto hay que hacerlo de otra forma
+            void PrepareGunshipEvent(Player* player)
+            {
+                Transport* th;
+                Transport* t;
+
+                if (GetBossState(DATA_GUNSHIP_EVENT) == DONE)
+                    return;
+
+                if(!isPrepared)
+                {
+                sLog->outDetail("isPrepared = false ----");
+                if(TeamInInstance == ALLIANCE)
+                {
+                    if(th = sMapMgr->LoadTransportInMap(instance, GO_ORGRIM_S_HAMMER_ALLIANCE_ICC, 108000))
+                    {
+                        th->AddNPCPassengerInInstance(NPC_GB_ORGRIMS_HAMMER, 1.845810f, 1.268872f, 34.526218f, 1.5890f);
+                        th->AddNPCPassengerInInstance(NPC_GB_HIGH_OVERLORD_SAURFANG, 37.18615f, 0.00016f, 36.78849f, 3.13683f);
+                        th->AddNPCPassengerInInstance(NPC_GB_INVISIBLE_STALKER, 37.18615f, 0.00016f, 36.78849f, 3.13683f);
+                        th->AddNPCPassengerInInstance(NPC_GB_KORKRON_BATTLE_MAGE, 47.2929f, -4.308941f, 37.5555f, 3.05033f);
+                        th->AddNPCPassengerInInstance(NPC_GB_KORKRON_BATTLE_MAGE, 47.34621f, 4.032004f, 37.70952f, 3.05033f);
+                        th->AddNPCPassengerInInstance(NPC_GB_KORKRON_BATTLE_MAGE, 15.03016f, 0.00016f, 37.70952f, 1.55138f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -13.19547f, -27.160213f, 35.47252f, 3.10672f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -18.33902f, -25.230491f, 33.04052f, 3.00672f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -60.1251f, -1.27014f, 42.8335f, 5.16073f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -48.2651f, 16.78034f, 34.2515f, 0.04292f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -14.8356f, 27.931688f, 33.363f, 1.73231f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 10.2702f, 20.62966f, 35.37483f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 39.32459f, 14.50176f, 36.88428f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 46.17223f, -6.638763f, 37.35444f, 1.32f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 27.4456f, -13.397498f, 36.34746f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 18.16184f, 1.37897f, 35.31705f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -18.11516f, -0.196236f, 45.15709f, 2.9f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -18.11844f, -0.19624f, 49.18192f, 1.6f);
+
+                        if (instance->ToInstanceMap()->GetMaxPlayers() == 10)
+                        {
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -3.170555f, 28.30652f, 34.21082f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -12.0928f, 27.65942f, 33.58557f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 14.92804f, 26.18018f, 35.47803f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 24.70331f, 25.36584f, 35.97845f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, -11.44849f, -25.71838f, 33.64343f, 1.49248f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, 12.30336f, -25.69653f, 35.32373f, 1.49248f);
+                        }
+                        else
+                        {
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -3.170555f, 28.30652f, 34.21082f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -12.0928f, 27.65942f, 33.58557f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 14.92804f, 26.18018f, 35.47803f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 24.70331f, 25.36584f, 35.97845f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, 19.92804f, 27.18018f, 35.47803f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_AXETHROWER, -7.70331f, 28.36584f, 33.88557f, 1.66527f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, -11.44849f, -25.71838f, 33.64343f, 1.49248f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, 12.30336f, -25.69653f, 35.32373f, 1.49248f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, -3.44849f, -25.71838f, 34.21082f, 1.49248f);
+                            th->AddNPCPassengerInInstance(NPC_GB_KORKRON_ROCKETEER, 3.30336f, -25.69653f, 35.32373f, 1.49248f);
+                        }
+                    }
+
+                    if(t = sMapMgr->LoadTransportInMap(instance, GO_THE_SKYBREAKER_ALLIANCE_ICC, 108000))
+                    {
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER, -17.156807f, -1.633260f, 20.81273f, 4.52672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_MURADIN_BRONZEBEARD, 13.51547f, -0.160213f, 20.87252f, 3.10672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_HIHG_CAPTAIN_JUSTIN_BARTLETT, 42.78902f, -0.010491f, 25.24052f, 3.00672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_HIGH_OVERLORD_SAURFANG_NOT_VISUAL, -12.9806f, -22.9462f, 21.659f, 4.72416f);
+                        t->AddNPCPassengerInInstance(NPC_GB_ZAFOD_BOOMBOX, 18.8042f, 9.907914f, 20.33559f, 3.10672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_DECKHAND, -64.8423f, 4.4658f, 23.4352f, 2.698897f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_DECKHAND, 35.54972f, 19.93269f, 25.0333f, 4.71242f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_DECKHAND, -36.39837f, 3.13127f, 20.4496f, 1.5708f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_DECKHAND, -36.23974f, -2.75767f, 20.4506f, 4.69496f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_DECKHAND, 41.94677f, 44.08411f, 24.66587f, 1.62032f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 13.51547f, -0.160213f, 20.87252f, 3.10672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 42.78902f, -0.010491f, 25.24052f, 3.00672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 14.0551f, 3.65014f, 20.7935f, 3.16073f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 14.0551f, -4.65034f, 20.7915f, 3.04292f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -17.8356f, 0.031688f, 20.823f, 4.73231f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -34.2702f, -26.18966f, 21.37483f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -11.64459f, -19.85176f, 20.88428f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -19.88223f, -6.578763f, 20.57444f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -41.4456f, -7.647498f, 20.49746f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 0.554884f, -1.232897f, 20.53705f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -50.16516f, 9.716236f, 23.58709f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 11.45844f, 16.36624f, 20.54192f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 19.72286f, -2.193787f, 33.06982f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 19.72286f, -2.193787f, 33.06982f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 8.599396f, -28.55855f, 24.79919f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 38.94339f, -33.808f,  25.39618f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 58.15474f, 0.748094f, 41.87663f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 5.607554f, -6.350654f, 34.00357f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 4.780305f, -29.05227f, 35.09634f, 1.6f);
+
+                        if (instance->ToInstanceMap()->GetMaxPlayers() == 10)
+                        {
+                            t->AddNPCPassengerInInstance(NPC_GB_ALLIANCE_CANON, -5.15231f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_ALLIANCE_CANON, -28.0876f, -22.9462f, 21.659f, 4.72416f);
+                        }
+                        else
+                        {
+                            t->AddNPCPassengerInInstance(NPC_GB_ALLIANCE_CANON, -5.15231f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_ALLIANCE_CANON, -14.9806f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_ALLIANCE_CANON, -21.7406f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_ALLIANCE_CANON, -28.0876f, -22.9462f, 21.659f, 4.72416f);
+                        }
+                    }
+                }
+
+                if(TeamInInstance == HORDE)
+                {
+                    if(t = sMapMgr->LoadTransportInMap(instance, GO_THE_SKYBREAKER_HORDE_ICC, 77800))
+                    {
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER, -17.156807f, -1.633260f, 20.81273f, 4.52672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_MURADIN_BRONZEBEARD, 13.51547f, -0.160213f, 20.87252f, 3.10672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_HIHG_CAPTAIN_JUSTIN_BARTLETT, 42.78902f, -0.010491f, 25.24052f, 3.00672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_SORCERERS, 14.0551f, 3.65014f, 20.7935f, 3.16073f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_SORCERERS, 14.0551f, -4.65034f, 20.7915f, 3.04292f);
+                        t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_SORCERERS, -17.8356f, 0.031688f, 20.823f, 4.73231f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 13.51547f, -0.160213f, 20.87252f, 3.10672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 42.78902f, -0.010491f, 25.24052f, 3.00672f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 14.0551f, 3.65014f, 20.7935f, 3.16073f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 14.0551f, -4.65034f, 20.7915f, 3.04292f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -17.8356f, 0.031688f, 20.823f, 4.73231f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -34.2702f, -26.18966f, 21.37483f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -11.64459f, -19.85176f, 20.88428f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -19.88223f, -6.578763f, 20.57444f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -41.4456f, -7.647498f, 20.49746f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 0.554884f, -1.232897f, 20.53705f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -50.16516f, 9.716236f, 23.58709f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 11.45844f, 16.36624f, 20.54192f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 19.72286f, -2.193787f, 33.06982f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 19.72286f, -2.193787f, 33.06982f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 8.599396f, -28.55855f, 24.79919f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 38.94339f, -33.808f,  25.39618f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 58.15474f, 0.748094f, 41.87663f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 5.607554f, -6.350654f, 34.00357f, 1.6f);
+                        t->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 4.780305f, -29.05227f, 35.09634f, 1.6f);
+
+                        if(instance->ToInstanceMap()->GetMaxPlayers() == 10)
+                        {
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -5.15231f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -14.9806f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -21.7406f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -28.0876f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -8.61003f, 15.483f, 20.4158f, 4.69854f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -27.9583f, 14.8875f, 20.4428f, 4.77865f);
+                        }
+                        else
+                        {
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, 0.15231f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -5.15231f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -14.9806f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -21.7406f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -28.0876f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_RIFLEMAN, -33.0876f, -22.9462f, 21.659f, 4.72416f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -8.61003f, 15.483f, 20.4158f, 4.69854f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -27.9583f, 14.8875f, 20.4428f, 4.77865f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -15.61003f, 15.483f, 20.4158f, 4.69854f);
+                            t->AddNPCPassengerInInstance(NPC_GB_SKYBREAKER_MORTAR_SOLDIER, -20.9583f, 14.8875f, 20.4428f, 4.77865f);
+                        }
+                    }
+                
+                    if(th = sMapMgr->LoadTransportInMap(instance,GO_ORGRIM_S_HAMMER_HORDE_ICC, 77800))
+                    {
+                        th->AddNPCPassengerInInstance(NPC_GB_ORGRIMS_HAMMER, 1.845810f, 1.268872f, 34.526218f, 1.5890f);
+                        th->AddNPCPassengerInInstance(NPC_GB_HIGH_OVERLORD_SAURFANG, 37.18615f, 0.00016f, 36.78849f, 3.13683f);
+                        th->AddNPCPassengerInInstance(NPC_GB_MURADIN_BRONZEBEARD_NOT_VISUAL, -7.09684f, 30.582f, 34.5013f, 1.53591f);
+                        th->AddNPCPassengerInInstance(NPC_GB_INVISIBLE_STALKER, 37.30764f, -0.143823f, 36.7936f, 3.13683f);
+                        th->AddNPCPassengerInInstance(NPC_GB_ZAFOD_BOOMBOX, 35.18615f, 15.30652f, 37.64343f, 3.05033f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -13.19547f, -27.160213f, 35.47252f, 3.10672f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -18.33902f, -25.230491f, 33.04052f, 3.00672f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -60.1251f, -1.27014f, 42.8335f, 5.16073f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -48.2651f, 16.78034f, 34.2515f, 0.04292f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -14.8356f, 27.931688f, 33.363f, 1.73231f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 10.2702f, 20.62966f, 35.37483f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 39.32459f, 14.50176f, 36.88428f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 46.17223f, -6.638763f, 37.35444f, 1.32f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 27.4456f, -13.397498f, 36.34746f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, 18.16184f, 1.37897f, 35.31705f, 1.6f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -18.11516f, -0.196236f, 45.15709f, 2.9f);
+                        th->AddNPCPassengerInInstance(NPC_GB_GUNSHIP_HULL, -18.11844f, -0.19624f, 49.18192f, 1.6f);
+
+                        if(instance->ToInstanceMap()->GetMaxPlayers() == 10)
+                        {
+                            th->AddNPCPassengerInInstance(NPC_GB_HORDE_CANON, 22.6225f, 28.9309f, 36.3929f, 1.53591f);
+                            th->AddNPCPassengerInInstance(NPC_GB_HORDE_CANON, -21.7509f, 29.4207f, 34.2588f, 1.53591f);
+                        }
+                        else
+                        {
+                            th->AddNPCPassengerInInstance(NPC_GB_HORDE_CANON, 22.6225f, 28.9309f, 36.3929f, 1.53591f);
+                            th->AddNPCPassengerInInstance(NPC_GB_HORDE_CANON, 9.87745f, 30.5047f, 35.7147f, 1.53591f);
+                            th->AddNPCPassengerInInstance(NPC_GB_HORDE_CANON, -7.09684f, 30.582f, 34.5013f, 1.53591f);
+                            th->AddNPCPassengerInInstance(NPC_GB_HORDE_CANON, -21.7509f, 29.4207f, 34.2588f, 1.53591f);
+                        }
+                    }
+                }
+                isPrepared = true;
+                }
+                else
+                {
+                    sLog->outDetail("isPrepared =true ----");
+                    sMapMgr->LoadTransportForPlayers(player);
+                }
+            }
 
         protected:
             EventMap Events;
@@ -1349,6 +1611,25 @@ class instance_icecrown_citadel : public InstanceMapScript
             bool IsOozeDanceEligible;
             bool IsNauseaEligible;
             bool IsOrbWhispererEligible;
+/* ----------------------------------------- AQUI OJO CON ESTAS VARIABLES PARA USAR LUEGO ----------------------- */
+            // Gunship: Variables
+            // Aqui hay que unir los estados del first squad y estas cosas con ls eventos reales
+            uint32 FirstSquadState;
+            uint32 SecondSquadState;
+            uint32 SpireSquadState;
+            uint64 SkybreakerBossGUID;
+            uint64 OrgrimmarBossGUID;
+            uint64 DeathbringerSaurfangGbGUID;
+            uint64 MuradinBronzebeardGbGUID;
+            uint64 DeathbringerSaurfangNotVisualGUID;
+            uint64 MuradinBronzebeardNotVisualGUID;
+            uint64 GbBattleMageGUID;
+            uint64 GunShipControllerGUID;
+            uint64 GBMuradinGUID;
+            uint64 GBSaurfangGUID;
+            uint64 GBSkybreakerGUID;
+            uint64 GBOgrimsHammerGUID;
+            bool isPrepared;
         };
 
         InstanceScript* GetInstanceScript(InstanceMap* map) const
-- 
1.7.8.msysgit.0

